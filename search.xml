<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通過travis-ci或者GitHub Actions自動化部署GitHub Pages和Coding Pages</title>
      <link href="posts/74006f42/"/>
      <url>posts/74006f42/</url>
      
        <content type="html"><![CDATA[<p>對於靜態博客來説，Hexo是一款很受歡迎的博客生成器。其擁有數百的主題和插件，方便我們部署和自定義博客內容。然而，很多生成器都有一個跟明顯的缺點，當網站的文章越來越多時，生成所需要的時間也越來越久。如果電腦效能差的話，部署時間則會更加的久。</p><p>為了解決這個問題，採用自動化部署是一個絕佳的選擇。現如今提供自動化部署的平台越來越多。像Travis CI，還有最近發佈的Github Actions。我們只需要把Hexo的目錄推送到GitHub去，相關平台監測到對應的Repositories發佈變化，就會自動去執行編譯，並把編譯好的內容發佈到博客Repositories去。</p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p><code>Travis CI</code>有提供免費版和企業版，以下的教程是在免費版上操作。</p><ul><li><a href="https://travis-ci.org/">免費版</a></li><li><a href="https://travis-ci.com/">企業版</a></li></ul><blockquote><p>免費版不支持私人倉庫(Private Repositories)部署</p></blockquote><h3 id="註冊"><a href="#註冊" class="headerlink" title="註冊"></a>註冊</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/travis-ci-login.png"></p><p>點擊<code>Sign Up</code>會自動跳到Github上去授權登錄。只需授權登錄就行，完成後會進入操作界面。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120203252.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120201038.png"></p><h3 id="設置倉庫Repositories"><a href="#設置倉庫Repositories" class="headerlink" title="設置倉庫Repositories"></a>設置倉庫Repositories</h3><p>接下來要選擇哪一個倉庫Repositories需要被監測。</p><p>點擊<code>Activate all repositories using GitHub Apps</code></p><p>然後點擊<code>Only select repositories</code>,選擇你想要的倉庫（hexo目錄的倉庫），點擊<code>Approve &amp; Install</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120203252.png"></p><p>選擇你想要的倉庫，點擊<code>settings</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/image-20200120203521820.png"></p><p>在<code>settings</code>界面，找到<code>Environment Variables</code>。為了保護我們的隱私，一些重要的資料寫在這裏，然後通過<code>$&#123;xxx&#125;</code>進行引用。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120203641.png"></p><h3 id="創建travis-配置文件"><a href="#創建travis-配置文件" class="headerlink" title="創建travis 配置文件"></a>創建travis 配置文件</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/image-20200120203911997.png"></p><p>在hexo根目錄創建一個travis 配置檔案。名稱一定要是<code>.travis.yml</code></p><p>把以下內容複製到裏面去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Travis-CI Caching</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">douban</span> <span class="string">&amp;&amp;</span> <span class="string">gulp</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;$&#123;GIT_NAME&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;$&#123;GIT_EMAIL&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Update&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;CDT_TOKEN&#125;@$&#123;CDT_REF&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># after_script:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>cache</code>是緩存node_modules文件夾，這樣就可以不用每次部署都要去下載各種依賴，只有存在變更時，才去下載。</p></li><li><p><code>branches</code>是指需要監測的<code>branch</code>,看你的hexo目錄放在哪裏，需要自己去修改</p></li><li><p><code>GIT_NAME</code>,<code>GIT_EMAIL</code>,<code>GH_TOKEN</code>這些是引入你在<code>Environment Variables</code>所配置的內容。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;CDT_TOKEN&#125;@$&#123;CDT_REF&#125;&quot;</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><p>第一個是推送到GitHub去，例如<code>jerryc127.github.io</code>倉庫。<br><code>GH_TOKEN</code>需要自己去GitHub setting裏申請<br><code>GH_REF</code>是指倉庫的git地址，例如：github.com/jerryc127/jerryc127.github.io.git</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120210211.png"></p><p>第二個是推送到Coding.me倉庫去。</p><p><code>CDT_TOKEN</code>需要到倉庫的項目設置，然後在<code>開發者選項</code>的<code>項目令牌</code>申請。</p><p><code>CDT_TOKEN</code>的內容為<code>用户名:密碼</code></p><p>如果是推送到<code>gh-pages</code>,需要把<code>master:master</code>更改為<code>master:gh-pages</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120205656.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120205820.png"></p><h3 id="運行"><a href="#運行" class="headerlink" title="運行"></a>運行</h3><p>現在你只要把Hexo的目錄推送到GitHub去，Travis會自動監測到變化，然後進行編譯。（編譯完成後會收到郵件通知是否編譯成功）</p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p><code>GitHub Actions</code>是GitHub於2019年底推出的自動化流程工具，它的功能很強大。而我們只需要用到它的構建。由於是GitHub自家的工具，我們無需再額外的註冊賬號，GitHub Actions也集成在了GitHub界面上，我們只需點擊<code>Actions</code>進行創建。</p><h3 id="創建Actions"><a href="#創建Actions" class="headerlink" title="創建Actions"></a>創建Actions</h3><p>在Hexo目錄的倉庫，點擊<code>Actions Tab</code>,然後點擊<code>Set up a workflow yourself</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120211059.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20200120211315.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/image-20200120211417492.png"></p><p>把以下代碼複製到代碼框去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自動部署</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">10.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">開始運行</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">設置</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安裝</span> <span class="string">Hexo</span> <span class="string">CI</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">緩存</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-dependencies</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安裝插件</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache-dependencies.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署博客</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">douban</span> <span class="string">&amp;&amp;</span> <span class="string">gulp</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">          <span class="string">git</span> <span class="string">init</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;secrets.GIT_NAME&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;secrets.GIT_EMAIL&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Update&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123;secrets.GH_TOKEN&#125;&#125;</span>@$<span class="template-variable">&#123;&#123;secrets.GH_REF&#125;&#125;</span>&quot;</span> <span class="string">master:master</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$<span class="template-variable">&#123;&#123;secrets.CD_TOKEN&#125;&#125;</span>@$<span class="template-variable">&#123;&#123;secrets.CD_REF&#125;&#125;</span>&quot;</span> <span class="string">master:master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>on</code>是要被監測的<code>branch</code>,等同Travis-ci的<code>branches</code></p><p>其它的都跟Travis-ci的配置差不多，這裏就不再仔細介紹。</p></li></ul><h3 id="設置隱私資料"><a href="#設置隱私資料" class="headerlink" title="設置隱私資料"></a>設置隱私資料</h3><p>為了不讓重要的資料暴露在公眾，需要把這些資料設置到<code>secrets</code>裏，然後通過$引用。</p><p>在<code>Settings</code>裏的<code>Secrets</code>裏設置</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/image-20200120212134568.png"></p><h3 id="運行-1"><a href="#運行-1" class="headerlink" title="運行"></a>運行</h3><p>現在你只要把Hexo的目錄推送到GitHub去，GitHub Actions會自動監測到變化，然後進行編譯。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://eallion.com/github-actions-hexo-ci/">Github Actions 自動部署 Hexo 腳本</a></li><li><a href="https://github.com/Molunerfinn/hexo-theme-melody/blob/dev/.travis.demo.yml">travis.demo by Molunerfinn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> travis-ci </tag>
            
            <tag> GitHub Actions </tag>
            
            <tag> 自動化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加Windows Terminal到鼠標右鍵菜單</title>
      <link href="posts/c621cf12/"/>
      <url>posts/c621cf12/</url>
      
        <content type="html"><![CDATA[<p>Windows上有很多命令行程序，例如CMD和PowerShell。微軟在Build 2019上推出了一款面向Windows10的命令行程序，這款程序集合了Windows上的PowerShell、CMD以及Windows Subsystem for Linux於一身，解決了不少惹人吐槽的毛病，甚至被稱為Windows下命令體驗的救世主。而我早在Preview版發佈時，就已經下載使用，現在也是我主要使用的命令行工具。然而畢竟現在還是體驗版的關係，所以並沒有集成在右鍵菜單上。在搜索了許久之後，終於在Github上找到了安裝方法。</p><h2 id="軟件安裝"><a href="#軟件安裝" class="headerlink" title="軟件安裝"></a>軟件安裝</h2><p> Windows Terminal 現在還是 Preview 狀態，我們可以在 Microsoft Store 上下載安裝。當然有能力的人，可以下載Github的代碼自己編譯。</p><p><a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab">Windows Terminal (Preview) - Microsoft Store</a></p><p><a href="https://github.com/microsoft/terminal">GitHub - microsoft/terminal: The new Windows Terminal, and the original Windows console host - all in the same place!</a></p><h2 id="添加-Windows-Terminal-到右鍵菜單"><a href="#添加-Windows-Terminal-到右鍵菜單" class="headerlink" title="添加 Windows Terminal 到右鍵菜單"></a>添加 Windows Terminal 到右鍵菜單</h2><h3 id="測試變量"><a href="#測試變量" class="headerlink" title="測試變量"></a>測試變量</h3><p>下面的兩個變量後面的操作需要使用到。所以，先測試下是否正常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo %USERPROFILE%</span><br><span class="line">echo %LOCALAPPDATA%</span><br></pre></td></tr></table></figure><p>如果有報錯，接下來的操作，請把對應的部分進行替換。</p><p><code>%USERPROFILE%</code> 替換成 <code>C:\Users\[userName]</code><br><code>%LOCALAPPDATA%</code> 替換成 <code>C:\Users\[userName]\AppData\Local</code></p><p><strong>注意</strong> <code>[userName]</code>為自己的用户名</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal_var_test.png"></p><h3 id="創建圖標"><a href="#創建圖標" class="headerlink" title="創建圖標"></a>創建圖標</h3><p>從以下地址下載圖標</p><p><a href="https://raw.githubusercontent.com/yanglr/WindowsDevTools/master/awosomeTerminal/icons/wt_32.ico">圖標ico下載</a> ， 打開網址，鼠標右鍵保存到電腦。</p><p>打開命令行，輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &quot;%USERPROFILE%\AppData\Local\terminal&quot;</span><br></pre></td></tr></table></figure><p>這個命令是創建一個<code>terminal</code>文件夾，把下載的圖標ico複製到這個文件夾。</p><h3 id="寫入註冊表"><a href="#寫入註冊表" class="headerlink" title="寫入註冊表"></a>寫入註冊表</h3><p>創建一個txt文檔，並把檔後綴改為<code>reg</code>。文檔的名字可自己創建，後綴名不可以錯。右鍵菜單出現<code>Windows Terminal</code>有兩種方法。一種是按<code>shift</code>+ <code>右鍵</code>,另一種是直接<code>右鍵</code>。</p><h4 id="shift-右鍵"><a href="#shift-右鍵" class="headerlink" title="shift+ 右鍵"></a><code>shift</code>+ <code>右鍵</code></h4><p>把下面的內容複製到reg去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@&#x3D;&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;&#x3D;&quot;%USERPROFILE%\\AppData\\Local\\terminal\\wt_32.ico&quot;</span><br><span class="line">&quot;Extended&quot;&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@&#x3D;&quot;C:\\Users\\[user_name]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：請把<code>[user_name]</code>改成自己電腦的用户名</p><h4 id="右鍵"><a href="#右鍵" class="headerlink" title="右鍵"></a>右鍵</h4><p>把下面的內容複製到reg去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@&#x3D;&quot;Windows terminal here&quot;</span><br><span class="line">&quot;Icon&quot;&#x3D;&quot;%USERPROFILE%\\AppData\\Local\\terminal\\wt_32.ico&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@&#x3D;&quot;C:\\Users\\[user_name]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：請把<code>[user_name]</code>改成自己電腦的用户名</p><h3 id="修改Windows-Terminal的profile-json"><a href="#修改Windows-Terminal的profile-json" class="headerlink" title="修改Windows Terminal的profile.json"></a>修改<code>Windows Terminal</code>的<code>profile.json</code></h3><p>打開<code>profile.json</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal_setting.png"></p><p>把<code>startingDirectory</code>改為<code>null</code>,沒有的自己創建一個。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal.setting_edit.png"></p><p>照著上面的方法操作，相信右鍵菜單已經出現<code>Windows Terminal</code>的入口了。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/Windows_Terminal_right_menu.png"></p><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><ol><li><a href="https://github.com/microsoft/terminal/issues/1060#issuecomment-497539461">‘Add “open Windows terminal here” into right-click context menu’ 下  yanglr 的回答</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>調研實現高性能動畫</title>
      <link href="posts/845ade13/"/>
      <url>posts/845ade13/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>本文轉載自<a href="https://relign.github.io/Animation/animation-optimize/">【总结】调研实现高性能动画</a></p></div><blockquote><p>本文是調研如何實現高性能動畫, 提升用户體驗的總結, 文章內容來源於對看過的相關技術文章的總結, 相關技術文章已列到文章末尾, 如有遺漏, 敬請諒解.</p></blockquote><p>快速響應和高度交互的頁面往往能夠吸引大量的用户群體. 相反, 如果頁面存在性能低下的動畫, 動畫不流暢, 動畫過程中頁面閃爍等等, 如此粗糙的交互體驗必然喪失用户量.</p><p>對於大多數的設備而言, 屏幕以 60 次每秒的頻率刷新, 即<code>60HZ</code>. 如果一個動畫中的某些幀超過了這個時間, 就會導致瀏覽器的刷新頻率跟不上設備的刷新頻率（跳幀現象）, 出現頁面閃爍. 因此, 高性能的動畫都應該保持在<code>60fps</code>左右.</p><p>接下來我們看幾種動畫的實現方式.</p><h3 id="基於setTimeout或者setInterval實現的動畫"><a href="#基於setTimeout或者setInterval實現的動畫" class="headerlink" title="基於setTimeout或者setInterval實現的動畫"></a>基於<code>setTimeout</code>或者<code>setInterval</code>實現的動畫</h3><h4 id="基於幀算法實現的動畫"><a href="#基於幀算法實現的動畫" class="headerlink" title="基於幀算法實現的動畫"></a>基於幀算法實現的動畫</h4><iframe height="471" scrolling="no" title="rWeGoX" src="//codepen.io/relign/embed/rWeGoX/?height=471&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"><p>這是一個基於幀算法實現的 JavaScript 動畫, 這裏設置的每秒鐘更新 60 次, 即<code>60fps</code>. 大家可以看到現在的動畫還是非常流暢的. 動畫的幀率也在 60 附近.</p><p>但是由於 JavaScript 運行時需要耗費時間, 而 JavaScript 又是單線程的, 所以如果一個定時器如果比較耗時的話, 是會阻塞下一個定時器的執行. 所以即使你這裏設置了<code>1000 / 60</code>每秒<code>60幀</code>的幀率, 在不同的瀏覽器平台的差異也會導致實際上你的沒有<code>60fps</code>的幀率.</p><p>所以上面代碼在一個手機上執行的時候可能有<code>60fps</code>的幀率, 在另外一個手機上可能就只有<code>30fps</code>, 更甚可能只有<code>10fps</code>.</p><p>我們去模擬一下這幾個幀率下的動畫:</p><iframe height="710" scrolling="no" title="xRVXyG" src="//codepen.io/relign/embed/xRVXyG/?height=710&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>很明顯產生的交互效果是不符合預期的. 導致這種情況的原因很簡單, 因為我們計算和繪製每個<code>div</code>位置的時候是在每幀更新, 每幀移動<code>2px</code>. 在<code>60fps</code>的情況下, 我們 1 秒鐘會執行<code>60幀</code>, 所以小塊每秒鐘會移動<code>60 * 2 = 120px</code>; 如果是<code>30fps</code>, 小塊每秒就移動<code>30 * 2 = 60px</code>, 以此類推<code>10fps</code>就是每秒移動<code>20px</code>. 三個小塊在單位時間內移動的距離不一樣.</p><h4 id="基於時間算法實現的動畫"><a href="#基於時間算法實現的動畫" class="headerlink" title="基於時間算法實現的動畫"></a>基於時間算法實現的動畫</h4><p>針對於這種情況, 我們對其作出改進. 我們不再以幀為基準來更新方塊的位置, 而是以時間為單位更新. 也就是説, 我們之前是<code>px/frame</code>, 現在換成<code>px/ms</code>.</p><iframe height="602" scrolling="no" title="XNdVEE" src="//codepen.io/relign/embed/XNdVEE/?height=602&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>在這裏, 我們先確定一個固定更新的時間片, 如固定為<code>60fps</code>時一幀的時間:<code>1000 / 60 = 0.167ms</code>. 然後積累過去的時間, 然後根據固定時間片分片進行更新. 也就説, 即使這一幀和上一幀相差過去了<code>100ms</code>, 我也會把這 100ms 分成很多個<code>0.167ms</code>來執行<code>update</code>函數. 這樣做有兩個好處:</p><ul><li>固定的時間片足夠小，更新的時候可以減少動畫失幀</li><li>不同幀率, 不管你是<code>60</code>,<code>30</code>, 還是<code>10fps</code>, 也是根據固定時間片來執行 update 函數, 所以即使有損失, 不同幀率之間的損失是一樣的. 那麼我們三個方塊就可以達到同步移動的效果的了!</li></ul><h4 id="基於setTimeout或者setInterval實現動畫存在的問題"><a href="#基於setTimeout或者setInterval實現動畫存在的問題" class="headerlink" title="基於setTimeout或者setInterval實現動畫存在的問題"></a>基於<code>setTimeout</code>或者<code>setInterval</code>實現動畫存在的問題</h4><p>使用<code>setTimeout</code>和<code>setInterval</code>來繪製動畫, 計算延時的精確度是不夠的.</p><p>延時的計算依靠的是瀏覽器的內置時鐘, 而時鐘的精確度又取決於時鐘更新的頻率. 不同版本的瀏覽器, 這個頻率是不一樣的: IE8 及其之前的 IE 版本更新間隔為 15.6 毫秒, 最新版的 Chrome 與 IE9 + 瀏覽器的更新頻率都為 4ms. 而且如果你使用的是筆記本電腦, 並且在使用電池而非電源的模式下, 為了節省資源, 瀏覽器會將更新頻率切換至於系統時間相同, 更新頻率更低.</p><p>而另外一個問題, 使用<code>setTimeout</code>和<code>setInterval</code>, 需要面臨異步隊列問題. 因為異步關係,<code>setTimeout</code>和<code>setInterval</code>中回調函數並非立即執行. 而是需要加入等待隊列中. 但問題是, 如果在等待延遲觸發的過程中, 有新的同步腳本需要執行, 那麼同步腳本不會排在回調之後, 而是立即執行.</p><p>例如:</p><iframe height="391" scrolling="no" title="jVqYXw" src="//codepen.io/relign/embed/jVqYXw/?height=391&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>很顯然, 這樣的動畫交互體驗是不可控的.</p><h3 id="基於requestAnimationFrame實現的動畫"><a href="#基於requestAnimationFrame實現的動畫" class="headerlink" title="基於requestAnimationFrame實現的動畫"></a>基於<code>requestAnimationFrame</code>實現的動畫</h3><p>針對<code>setTimeout</code>和<code>setInterval</code>實現動畫存在的缺陷,<code>Mozilla</code>首先推出了<code>mozRequestAnimationFrame</code>, 通過它告訴瀏覽器某些 JavaScript 代碼將要執行動畫, 這樣瀏覽器可以在運行某些代碼後進行適當的優化. 之後,<code>Chrome</code>和<code>IE10+</code>也都給出了自己的實現,<code>webkitRequestAnimationFrame</code>和<code>msRequestAnimationFrame</code>. 後來隨着<code>HTML5</code>新的 API 發佈,<code>requestAnimationFrame</code>被正式推出.</p><p>官方定義:</p><blockquote><p>window.requestAnimationFrame() 這個方法是用來在頁面重繪之前, 通知瀏覽器調用一個指定的函數, 以滿足開發者操作動畫的需求. 這個方法接受一個函數為參, 該函數會在重繪前調用.</p></blockquote><p>注意: 如果想得到連貫的逐幀動畫, 函數中必須重新調用 <code>requestAnimationFrame()</code>.</p><iframe height="371" scrolling="no" title="qqZxqW" src="//codepen.io/relign/embed/qqZxqW/?height=371&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p><code>requestAnimationFrame</code>最大的好處在於可以可以避免瀏覽器不必要的重繪. 想要理解這個好處, 我們首先需要簡單瞭解一下瀏覽器的渲染過程.</p><h3 id="瀏覽器渲染過程"><a href="#瀏覽器渲染過程" class="headerlink" title="瀏覽器渲染過程"></a>瀏覽器渲染過程</h3><p>要實現一個高性能的動畫, 首選我們必須對瀏覽器的渲染機制有所瞭解:</p><blockquote><p>更加詳細的渲染過程解讀詳見<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">瀏覽器的工作原理：新式網絡瀏覽器幕後揭祕</a></p></blockquote><p>Chrome 渲染過程:<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/webkitflow.png" alt="webkitflow.png"></p><p>從圖中可以看出, 瀏覽在渲染頁面過程中依次經歷了:</p><ol><li>HTML Parse(html 解析)</li><li>Calculate Style(計算樣式)</li><li>Layout(佈局)</li><li>Rasterizer(光柵化)</li><li>Paint(繪製)</li><li>Composite Layers(渲染層合併)</li></ol><h4 id="HTML-Parser"><a href="#HTML-Parser" class="headerlink" title="HTML Parser"></a>HTML Parser</h4><p>發送<code>http</code>請求, 獲取請求內容, 然後解析 HTML 的過程. 更加詳細的可以看這裏 <a href="https://github.com/alex/what-happens-when">What happens when…</a> 以及對應的翻譯文檔<a href="https://github.com/skyline75489/what-happens-when-zh_CN">當 ··· 時發生了什麼?</a></p><h4 id="Calculate-Style"><a href="#Calculate-Style" class="headerlink" title="Calculate Style"></a>Calculate Style</h4><p>即計算樣式.</p><p>Calculate 被觸發的時候做的事情就是處理 JavaScript 給元素設置的樣式. 此時 Recalculate Style 會計算 Render 樹 (渲染樹), 然後從根節點開始進行頁面渲染, 將 CSS 附加到 DOM 上的過程.</p><p>這個過程是根據 CSS 選擇器, 對每個 DOM 元素匹配對應的 CSS 樣式. 這一步結束之後, 就確定了每個 DOM 元素上應該應用什麼 CSS 樣式規則.</p><p><strong>任何企圖改變元素樣式的操作都會觸發 Recalculate(重新計算樣式)</strong>. 同 Layout 一樣, 它們都是 JavaScript 執行完後才觸發的.</p><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>計算頁面上的佈局, 即元素在文檔中的位置及大小. 正如前面所述, Layout 計算的是佈局位置信息.</p><p>上一步確定了每個 DOM 元素的樣式規則, 這一步就是具體計算每個 DOM 元素最終在屏幕上顯示的大小和位置.</p><p>需要注意的是: 在頁面解析完成後, 任何有可能改變元素位置或大小的樣式都會觸發這個 Layout 事件.</p><p>常見影響佈局的 CSS 屬性有:</p><ul><li><code>width</code></li><li><code>height</code></li><li><code>padding</code></li><li><code>margin</code></li><li><code>display</code></li><li><code>border-width</code></li><li><code>border</code></li><li><code>top</code></li><li><code>position</code></li><li><code>font-size</code></li><li><code>float</code></li><li><code>text-align</code></li><li><code>overflow-y</code></li><li><code>font-weight</code></li><li><code>overflow</code></li><li><code>left</code></li><li><code>font-family</code></li><li><code>line-height</code></li><li><code>vertical-align</code></li><li><code>right</code></li><li><code>clear</code></li><li><code>white-space</code></li><li><code>bottom</code></li><li><code>min-height</code></li></ul><p>等等, 更多觸發 Layout 事件的屬性, 可以在 <a href="https://csstriggers.com/">CSS Triggers</a> 網站查閲.</p><h4 id="Rasterizer"><a href="#Rasterizer" class="headerlink" title="Rasterizer"></a>Rasterizer</h4><p>光柵化, 一般的安卓手機都會進行光柵化, 光柵主要是針對圖形的一個柵格化過程. 低端手機在這部分耗時還是蠻多的.</p><h4 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h4><p>本質上就是填充像素的過程. 包括繪製文字、顏色、圖像、邊框和陰影等, 也就是一個 DOM 元素所有的可視效果. 一般來説, 這個繪製過程是在多個層上完成的.</p><p>Paint 的工作就是把文檔中用户可見的那一部分展現給用户. Paint 是把 Layout 和 Calculate 的計算的結果直接在瀏覽器視窗上繪製出來, 它並不實現具體的元素計算.</p><p>同樣, 頁面解析完成後, 改變某些樣式也會引起 RePaint(重繪).</p><p>常見引起 RePaint(重繪) 的樣式:</p><ul><li><code>color</code></li><li><code>border-style</code></li><li><code>visibility</code></li><li><code>background</code></li><li><code>text-decoration</code></li><li><code>background-image</code></li><li><code>background-position</code></li><li><code>background-repeat</code></li><li><code>outline-color</code></li><li><code>outline</code></li><li><code>outline-style</code></li><li><code>border-radius</code></li><li><code>outline-width</code></li><li><code>box-shadow</code></li><li><code>background-size</code></li></ul><p>如果你在元素中對以上的屬性設置動畫, 那麼將會引起重繪, 並且元素所屬的圖層將提交給 GPU 進行處理.<br>對於移動端設備來説, 這代價是非常昂貴的, 因為它們的 CPU 的處理能力明顯弱於桌面端. 這意味着, 任務將用更長的時間來完成; 並且 CPU 和 GPU 之間的帶寬是有限的, 所以數據的上傳需要花費很長的一段時間.</p><h4 id="Composite-Layers"><a href="#Composite-Layers" class="headerlink" title="Composite Layers"></a>Composite Layers</h4><p>最後合併圖層, 輸出頁面到屏幕. 瀏覽器在渲染過程中會將一些含有特殊樣式的 DOM 結構繪製於其他圖層, 有點類似於<code>PhotoShop</code>的圖層概念. 一張圖片在<code>PotoShop</code>是由多個圖層組合而成, 而瀏覽器最終顯示的頁面實際也是有多個圖層構成的.</p><p>在每個層上完成繪製過程之後, 瀏覽器會將所有層按照合理的順序合併成一個圖層, 然後在屏幕上呈現. 對於有位置重疊的元素的頁面, 這個過程尤其重要, 因為一旦圖層的合併順序出錯, 將會導致元素顯示異常.</p><p>常見的導致新圖層創建的因素有:</p><ul><li>進行 3D 或者透視變換的 CSS 屬性</li><li>使用硬件加速視頻解碼的<code>&lt;video&gt;</code>元素</li><li>具有 3D(WebGL) 上下文或者硬件加速的 2D 上下文的<code>&lt;canvas&gt;</code>元素</li><li>組合型插件 (即 Flash)</li><li>具有有 CSS 透明度動畫或者使用動畫式 Webkit 變換的元素</li><li>具有硬件加速的 CSS 濾鏡的元素</li></ul><h3 id="影響動畫渲染性能的因素"><a href="#影響動畫渲染性能的因素" class="headerlink" title="影響動畫渲染性能的因素"></a>影響動畫渲染性能的因素</h3><p>上述流程可以歸納為五個關鍵步驟:</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/css-animation-4.jpg" alt="css-animation-4.jpg"></p><p>這也是我們在實現動畫過程中有可能會觸發的五個步驟, 搞清楚我們實現動畫的代碼在哪一步, 有助於我們實現高性能流暢的動畫.<br>在上面的流程中, 我們需要注意兩個概念 <strong>重排 (也就是迴流)</strong> 和 <strong>重繪</strong>. 這兩個概念與上述流程中的 Layout 和 Paint 都有關係, 而 Layout 和 Paint 又對動畫渲染的性能至關重要.</p><h4 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h4><p><code>Reflow</code>(重排) 指的是計算頁面佈局 (Layout). 某個節點<code>Reflow</code>時會重新計算節點的尺寸和位置, 而且還有可能觸發其後代節點<code>Reflow</code>. 在這之後再次觸發一次<code>Repaint</code>(重繪).</p><p>當 Render Tree 中的一部分 (或全部) 因為元素的尺寸、佈局、隱藏等改變而需要重新構建. 這就稱為迴流, 每個頁面至少需要一次迴流, 就是頁面第一次加載的時候.</p><p>在 Web 頁面中, 很多狀況下會導致迴流:</p><ul><li>調整窗口大小</li><li>改變字體</li><li>增加或者移除樣式表</li><li>內容變化</li><li>激活 CSS 偽類</li><li>操作 CSS 屬性</li><li>JavaScript 操作 DOM</li><li>計算<code>offsetWidth</code>和<code>offsetHeight</code></li><li>設置<code>style</code>屬性的值</li><li>CSS3 Animation 或 Transition</li></ul><h4 id="重繪"><a href="#重繪" class="headerlink" title="重繪"></a>重繪</h4><p><code>Repaint</code>(重繪) 或者<code>Redraw</code>遍歷所有節點, 檢測節點的可見性、顏色、輪廓等可見的樣式屬性, 然後根據檢測的結果更新頁面的響應部分.<br>當 Render Tree 中的一些元素需要更新屬性, 而這些屬性只是影響元素的外觀、風格、而不會影響佈局的. 就是重繪.</p><p>將重排和重繪的介紹結合起來, 不難發現: <strong>重繪 (Repaint) 不一定會引起迴流(Reflow 重排), 但迴流必將引起重繪(Repaint)</strong>.</p><p>由此可見, 重排和重繪很容易被觸發, 而他們對動畫渲染的性能影響非常大. 我們需要做的是儘量不去觸發重繪和重排.</p><h3 id="動畫渲染性能優化"><a href="#動畫渲染性能優化" class="headerlink" title="動畫渲染性能優化"></a>動畫渲染性能優化</h3><p><strong>過早進行性能優化是大忌</strong>, 如果我們實現的動畫並沒有性能方面的問題, 就沒有必要將時間成本浪費在性能優化上.</p><h4 id="在Composite這步優化動畫"><a href="#在Composite這步優化動畫" class="headerlink" title="在Composite這步優化動畫"></a>在<code>Composite</code>這步優化動畫</h4><p>在實現用户交互動畫的過程中, 我們儘量避免重繪和重排. 現在瀏覽器可以利用<code>transform</code>和<code>opacity</code>繪製很好的動畫. 因為這些屬性只會影響<br>瀏覽器渲染的最後一步<code>Composite</code>過程.</p><p>共有四個讓動畫更好的屬性:</p><ul><li>位置 (Position): <code>transform: translateX(n) translateY(n) translateZ(n)</code></li><li>縮放 (Scale): <code>transform: scale(n)</code></li><li>旋轉 (Rotation): <code>transform: rotate(ndeg)</code></li><li>透明度 (Opacity): <code>opacity: n</code></li></ul><h4 id="在-GPU-上運行動畫"><a href="#在-GPU-上運行動畫" class="headerlink" title="在 GPU 上運行動畫"></a>在 GPU 上運行動畫</h4><p>在 CSS 中提供了一個新的 CSS 特性:<code>will-change</code>. 其主要作用就是 <strong>提前告訴瀏覽器我這裏將會進行一些變動, 請分配資源 (告訴瀏覽器要分配資源給我).</strong> 因此瀏覽器不需要考慮容器佈局的渲染或繪製.</p><blockquote><p><code>will-change</code>屬性, 允許作者提前告知瀏覽器的默認樣式, 那他們可能會做出一個元素. 它允許對瀏覽器默認樣式的優化如何提前處理因素, 在動畫實際開始之前, 為準備動畫執行潛在昂貴的工作. 有關於<code>will-change</code>更詳細的介紹可以<a href="http://www.w3cplus.com/css3/introduction-css-will-change-property.html">點擊這裏</a>.</p></blockquote><p>在使用<code>will-change</code>一定要注意方式方法, 比如常見的錯誤方法是直接在<code>:hover</code>是使用, 並沒有告訴瀏覽器分配資源:  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">will-change</span>: transform;</span><br><span class="line"><span class="attribute">transition</span>: transform <span class="number">2s</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>) <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其正確使用的方法是, 在進入父元素的時候就告訴瀏覽器, 你該分配一定的資源:  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: opacity .<span class="number">3s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* declare changes on the element when the mouse enters / hovers its ancestor */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ancestor</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.element</span> &#123;</span><br><span class="line"><span class="attribute">will-change</span>: opacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* apply change when element is hovered */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在應用變化之後, 取消<code>will-change</code>的資源分配:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;demo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">&#x27;animationEnd&#x27;</span>, removeHint);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHint</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.style.willChange = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>will-change</code>時, 還需注意:</p><ul><li>不要將<code>will-change</code>應用到太多元素上: 瀏覽器已經盡力嘗試去優化一切可以優化的東西了. 有一些更強力的優化, 如果與<code>will-change</code>結合在一起的話, 有可能會消耗很多機器資源, 如果過度使用的話, 可能導致頁面響應緩慢或者消耗非常多的資源.</li><li>有節制地使用: 通常, 當元素恢復到初始狀態時, 瀏覽器會丟棄掉之前做的優化工作. 但是如果直接在樣式表中顯式聲明瞭<code>will-change</code>屬性, 則表示目標元素可能會經常變化, 瀏覽器會將優化工作保存得比之前更久. 所以最佳實踐是當元素變化之前和之後通過腳本來切換<code>will-change</code>的值.</li><li>不要過早應用<code>will-change</code>優化: 如果你的頁面在性能方面沒什麼問題, 則不要添加<code>will-change</code>屬性來榨取一丁點的速度.<code>will-change</code>的設計初衷是作為最後的優化手段, 用來嘗試解決現有的性能問題. 它不應該被用來預防性能問題. 過度使用<code>will-change</code>會導致大量的內存佔用, 並會導致更復雜的渲染過程, 因為瀏覽器會試圖準備可能存在的變化過程. 這會導致更嚴重的性能問題.</li><li>給它足夠的工作時間: 這個屬性是用來讓頁面開發者告知瀏覽器哪些屬性可能會變化的. 然後瀏覽器可以選擇在變化發生前提前去做一些優化工作. 所以給瀏覽器一點時間去真正做這些優化工作是非常重要的. 使用時需要嘗試去找到一些方法提前一定時間獲知元素可能發生的變化, 然後為它加上 <code>will-change</code>屬性.</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering/">Javascript 高性能動畫與頁面渲染</a></li><li><a href="http://www.w3cplus.com/animation/how-to-achieve-60-fps-animations-with-css3.html">使用 CSS3 實現 60FPS 動畫</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/speed/high-performance-animations/">High Performance Animations</a></li><li><a href="http://bubkoo.com/2016/03/31/high-performance-animations/">使用 FLIP 來提高 Web 動畫的性能</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">瀏覽器的工作原理：新式網絡瀏覽器幕後揭祕</a></li><li><a href="http://www.w3cplus.com/animation/animation-performance.html">CSS Animation 性能優化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 性能優化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在瀏覽器輸入 URL 回車之後發生了什麼（超詳細版）</title>
      <link href="posts/20bbe8ff/"/>
      <url>posts/20bbe8ff/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>本文轉自<a href="https://4ark.me/post/b6c7c0a2.html">4ark</a></p></div><p>這個問題已經是老生常談了，更是經常被作為面試的壓軸題出現，網上也有很多文章，但最近閒的無聊，然後就自己做了一篇筆記，感覺比之前理解更透徹了。  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這個問題已經是老生常談了，更是經常被作為面試的壓軸題出現，網上也有很多文章，但最近閒的無聊，然後就自己做了一篇筆記，感覺比之前理解更透徹了。</p><p>這篇筆記是我這兩天看了數十篇文章總結出來的，所以相對全面一點，但由於我是做前端的，所以會比較重點分析瀏覽器渲染頁面那一部分，至於其他部分我會羅列出關鍵詞，感興趣的可以自行查閲，</p><p><strong>注意:</strong> 本文的步驟是建立在，請求的是一個簡單的 HTTP 請求，沒有 HTTPS、HTTP2、最簡單的 DNS、沒有代理、並且服務器沒有任何問題的基礎上，儘管這是不切實際的。</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li>URL 解析</li><li>DNS 查詢</li><li>TCP 連接</li><li>處理請求</li><li>接受響應</li><li>渲染頁面</li></ol><h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><strong>地址解析：</strong></p><p>首先判斷你輸入的是一個合法的 URL 還是一個待搜索的關鍵詞，並且根據你輸入的內容進行自動完成、字符編碼等操作。</p><p><strong>HSTS</strong></p><p>由於安全隱患，會使用 HSTS 強制客户端使用 HTTPS 訪問頁面。詳見：<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS</a>。</p><p><strong>其他操作</strong></p><p>瀏覽器還會進行一些額外的操作，比如安全檢查、訪問限制（之前國產瀏覽器限制 996.icu）。</p><p><strong>檢查緩存</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter.png"></p><h3 id="DNS-查詢"><a href="#DNS-查詢" class="headerlink" title="DNS 查詢"></a>DNS 查詢</h3><p><strong>基本步驟</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_baisc_process.png"></p><h4 id="瀏覽器緩存"><a href="#瀏覽器緩存" class="headerlink" title="瀏覽器緩存"></a>瀏覽器緩存</h4><p>瀏覽器會先檢查是否在緩存中，沒有則調用系統庫函數進行查詢。</p><h4 id="操作系統緩存"><a href="#操作系統緩存" class="headerlink" title="操作系統緩存"></a>操作系統緩存</h4><p>操作系統也有自己的 DNS 緩存，但在這之前，會向檢查域名是否存在本地的 Hosts 文件裏，沒有則向 DNS 服務器發送查詢請求。</p><h4 id="路由器緩存"><a href="#路由器緩存" class="headerlink" title="路由器緩存"></a>路由器緩存</h4><p>路由器也有自己的緩存。</p><h4 id="ISP-DNS-緩存"><a href="#ISP-DNS-緩存" class="headerlink" title="ISP DNS 緩存"></a>ISP DNS 緩存</h4><p>ISP DNS 就是在客户端電腦上設置的首選 DNS 服務器，它們在大多數情況下都會有緩存。</p><h4 id="根域名服務器查詢"><a href="#根域名服務器查詢" class="headerlink" title="根域名服務器查詢"></a>根域名服務器查詢</h4><p>在前面所有步驟沒有緩存的情況下，本地 DNS 服務器會將請求轉發到互聯網上的根域，下面這個圖很好的詮釋了整個流程：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_dns.png"></p><blockquote><p>根域名服務器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">維基百科</a></p></blockquote><p><strong>需要注意的點</strong></p><ol><li>遞歸方式：一路查下去中間不返回，得到最終結果才返回信息（瀏覽器到本地 DNS 服務器的過程）</li><li>迭代方式，就是本地 DNS 服務器到根域名服務器查詢的方式。</li><li>什麼是 DNS 劫持</li><li>前端 dns-prefetch 優化</li></ol><h3 id="TCP-連接"><a href="#TCP-連接" class="headerlink" title="TCP 連接"></a>TCP 連接</h3><p>TCP/IP 分為四層，在發送數據時，每層都要對數據進行封裝：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_tcp.png"></p><h4 id="1-應用層：發送-HTTP-請求"><a href="#1-應用層：發送-HTTP-請求" class="headerlink" title="1. 應用層：發送 HTTP 請求"></a>1. 應用層：發送 HTTP 請求</h4><p>在前面的步驟我們已經得到服務器的 IP 地址，瀏覽器會開始構造一個 HTTP 報文，其中包括：</p><ul><li>請求報頭（Request Header）：請求方法、目標地址、遵循的協議等等</li><li>請求主體（其他參數）</li></ul><p>其中需要注意的點：</p><ul><li>瀏覽器只能發送 GET、POST 方法，而打開網頁使用的是 GET 方法</li></ul><h4 id="2-傳輸層：TCP-傳輸報文"><a href="#2-傳輸層：TCP-傳輸報文" class="headerlink" title="2. 傳輸層：TCP 傳輸報文"></a>2. 傳輸層：TCP 傳輸報文</h4><p>傳輸層會發起一條到達服務器的 TCP 連接，為了方便傳輸，會對數據進行分割（以報文段為單位），並標記編號，方便服務器接受時能夠準確地還原報文信息。</p><p>在建立連接前，會先進行 TCP 三次握手。</p><blockquote><p>關於 TCP/IP 三次握手，網上已經有很多段子和圖片生動地描述了。<br>相關知識點：</p><ol><li>SYN 泛洪攻擊</li></ol></blockquote><h4 id="3-網絡層：IP-協議查詢-Mac-地址"><a href="#3-網絡層：IP-協議查詢-Mac-地址" class="headerlink" title="3. 網絡層：IP 協議查詢 Mac 地址"></a>3. 網絡層：IP 協議查詢 Mac 地址</h4><p>將數據段打包，並加入源及目標的 IP 地址，並且負責尋找傳輸路線。</p><p>判斷目標地址是否與當前地址處於同一網絡中，是的話直接根據 Mac 地址發送，否則使用路由表查找下一跳地址，以及使用 ARP 協議查詢它的 Mac 地址。</p><blockquote><p>注意：在 OSI 參考模型中 ARP 協議位於鏈路層，但在 TCP/IP 中，它位於網絡層。</p></blockquote><h4 id="4-鏈路層：以太網協議"><a href="#4-鏈路層：以太網協議" class="headerlink" title="4. 鏈路層：以太網協議"></a>4. 鏈路層：以太網協議</h4><p><strong>以太網協議</strong></p><p>根據以太網協議將數據分為以 “幀” 為單位的數據包，每一幀分為兩個部分：</p><ul><li>標頭：數據包的發送者、接受者、數據類型</li><li>數據：數據包具體內容</li></ul><p><strong>Mac 地址</strong></p><p>以太網規定了連入網絡的所有設備都必須具備 “網卡” 接口，數據包都是從一塊網卡傳遞到另一塊網卡，網卡的地址就是 Mac 地址。每一個 Mac 地址都是獨一無二的，具備了一對一的能力。</p><p><strong>廣播</strong></p><p>發送數據的方法很原始，直接把數據通過 ARP 協議，向本網絡的所有機器發送，接收方根據標頭信息與自身 Mac 地址比較，一致就接受，否則丟棄。</p><p><strong>注意</strong>：接收方迴應是單播。</p><blockquote><p>相關知識點：</p><ol><li>ARP 攻擊</li></ol></blockquote><p><strong>服務器接受請求</strong></p><p>接受過程就是把以上步驟逆轉過來，參見上圖。</p><h3 id="服務器處理請求"><a href="#服務器處理請求" class="headerlink" title="服務器處理請求"></a>服務器處理請求</h3><p><strong>大致流程</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_1.png"></p><p><strong>HTTPD</strong></p><p>最常見的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它會監聽得到的請求，然後開啟一個子進程去處理這個請求。</p><p><strong>處理請求</strong></p><p>接受 TCP 報文後，會對連接進行處理，對 HTTP 協議進行解析（請求方法、域名、路徑等），並且進行一些驗證：</p><ul><li>驗證是否配置虛擬主機</li><li>驗證虛擬主機是否接受此方法</li><li>驗證該用户可以使用該方法（根據 IP 地址、身份信息等）</li></ul><p><strong>重定向</strong></p><p>假如服務器配置了 HTTP 重定向，就會返回一個 <code>301</code>永久重定向響應，瀏覽器就會根據響應，重新發送 HTTP 請求（重新執行上面的過程）。</p><blockquote><p>關於更多：<a href="https://www.cnblogs.com/workest/p/3891321.html">詳見這篇文章</a></p></blockquote><p><strong>URL 重寫</strong></p><p>然後會查看 URL 重寫規則，如果請求的文件是真實存在的，比如圖片、html、css、js 文件等，則會直接把這個文件返回。</p><p>否則服務器會按照規則把請求重寫到 一個 REST 風格的 URL 上。</p><p>然後根據動態語言的腳本，來決定調用什麼類型的動態文件解釋器來處理這個請求。</p><p>以 PHP 語言的 MVC 框架舉例，它首先會初始化一些環境的參數，根據 URL 由上到下地去匹配路由，然後讓路由所定義的方法去處理請求。</p><h3 id="瀏覽器接受響應"><a href="#瀏覽器接受響應" class="headerlink" title="瀏覽器接受響應"></a>瀏覽器接受響應</h3><p>瀏覽器接收到來自服務器的響應資源後，會對資源進行分析。</p><p>首先查看 Response header，根據不同狀態碼做不同的事（比如上面提到的重定向）。</p><p>如果響應資源進行了壓縮（比如 gzip），還需要進行解壓。</p><p>然後，對響應資源做緩存。</p><p>接下來，根據響應資源裏的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a> 類型去解析響應內容（比如 HTML、Image 各有不同的解析方式）。</p><h3 id="渲染頁面"><a href="#渲染頁面" class="headerlink" title="渲染頁面"></a>渲染頁面</h3><p><strong>瀏覽器內核</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_broswer.png"></p><p>不同的瀏覽器內核，渲染過程也不完全相同，但大致流程都差不多。</p><p><strong>基本流程</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_2.png"></p><h4 id="HTML-解析"><a href="#HTML-解析" class="headerlink" title="HTML 解析"></a>HTML 解析</h4><p>首先要知道瀏覽器解析是從上往下一行一行地解析的。</p><p>解析的過程可以分為四個步驟：</p><p><strong>1. 解碼（encoding）</strong></p><p>傳輸回來的其實都是一些二進制字節數據，瀏覽器需要根據文件指定編碼（例如 UTF-8）轉換成字符串，也就是 HTML 代碼。</p><p><strong>2. 預解析（pre-parsing）</strong></p><p>預解析做的事情是提前加載資源，減少處理時間，它會識別一些會請求資源的屬性，比如<code>img</code>標籤的<code>src</code>屬性，並將這個請求加到請求隊列中。</p><p><strong>3. 符號化（Tokenization）</strong></p><p>符號化是詞法分析的過程，將輸入解析成符號，HTML 符號包括，開始標籤、結束標籤、屬性名和屬性值。</p><p>它通過一個狀態機去識別符號的狀態，比如遇到<code>&lt;</code>，<code>&gt;</code>狀態都會產生變化。</p><p><strong>4. 構建樹（tree construction）</strong></p><blockquote><p>注意：符號化和構建樹是並行操作的，也就是説只要解析到一個開始標籤，就會創建一個 DOM 節點。</p></blockquote><p>在上一步符號化中，解析器獲得這些標記，然後以合適的方法創建<code>DOM</code>對象並把這些符號插入到<code>DOM</code>對象中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Web page parsing&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Web page parsing&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;This is an example Web page.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_html.png"></p><p><strong>瀏覽器容錯進制</strong></p><p>你從來沒有在瀏覽器看過類似” 語法無效” 的錯誤，這是因為瀏覽器去糾正錯誤的語法，然後繼續工作。</p><p><strong>事件</strong></p><p>當整個解析的過程完成以後，瀏覽器會通過<code>DOMContentLoaded</code>事件來通知<code>DOM</code>解析完成。</p><h4 id="CSS-解析"><a href="#CSS-解析" class="headerlink" title="CSS 解析"></a>CSS 解析</h4><p>一旦瀏覽器下載了 CSS，CSS 解析器就會處理它遇到的任何 CSS，根據<a href="https://drafts.csswg.org/css-syntax-3/">語法規範</a>解析出所有的 CSS 並進行標記化，然後我們得到一個規則表。</p><p><strong>CSS 匹配規則</strong></p><p>在匹配一個節點對應的 CSS 規則時，是按照從右到左的順序的，例如：<code>div p &#123; font-size :14px &#125;</code>會先尋找所有的<code>p</code>標籤然後判斷它的父元素是否為<code>div</code>。</p><p>所以我們寫 CSS 時，儘量用 id 和 class，千萬不要過度層疊。</p><h4 id="渲染樹"><a href="#渲染樹" class="headerlink" title="渲染樹"></a>渲染樹</h4><p>其實這就是一個 DOM 樹和 CSS 規則樹合併的過程。</p><blockquote><p>注意：渲染樹會忽略那些不需要渲染的節點，比如設置了<code>display:none</code>的節點。</p></blockquote><p><strong>計算</strong></p><p>通過計算讓任何尺寸值都減少到三個可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>轉化為<code>px</code>。</p><p><strong>級聯</strong></p><p>瀏覽器需要一種方法來確定哪些樣式才真正需要應用到對應元素，所以它使用一個叫做<code>specificity</code>的公式，這個公式會通過：</p><ol><li>標籤名、class、id</li><li>是否內聯樣式</li><li><code>!important</code></li></ol><p>然後得出一個權重值，取最高的那個。</p><p><strong>渲染阻塞</strong></p><p>當遇到一個<code>script</code>標籤時，DOM 構建會被暫停，直至腳本完成執行，然後繼續構建 DOM 樹。</p><p>但如果 JS 依賴 CSS 樣式，而它還沒有被下載和構建時，瀏覽器就會延遲腳本執行，直至 CSS Rules 被構建。</p><p>所有我們知道：</p><ul><li>CSS 會阻塞 JS 執行</li><li>JS 會阻塞後面的 DOM 解析</li></ul><p>為了避免這種情況，應該以下原則：</p><ul><li>CSS 資源排在 JavaScript 資源前面</li><li>JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改變阻塞模式，可以使用 defer 與 async，詳見：<a href="https://github.com/xiaoyu2er/blog/issues/8">這篇文章</a></p><h5 id="佈局與繪製"><a href="#佈局與繪製" class="headerlink" title="佈局與繪製"></a>佈局與繪製</h5><p>確定渲染樹種所有節點的幾何屬性，比如：位置、大小等等，最後輸入一個盒子模型，它能精準地捕獲到每個元素在屏幕內的準確位置與大小。</p><p>然後遍歷渲染樹，調用渲染器的 paint() 方法在屏幕上顯示其內容。</p><h5 id="合併渲染層"><a href="#合併渲染層" class="headerlink" title="合併渲染層"></a>合併渲染層</h5><p>把以上繪製的所有圖片合併，最終輸出一張圖片。</p><h5 id="迴流與重繪"><a href="#迴流與重繪" class="headerlink" title="迴流與重繪"></a>迴流與重繪</h5><p><strong>迴流 (reflow)</strong></p><p>當瀏覽器發現某個部分發現變化影響了佈局時，需要倒回去重新渲染，會從<code>html</code>標籤開始遞歸往下，重新計算位置和大小。</p><p>reflow 基本是無法避免的，因為當你滑動一下鼠標、resize 窗口，頁面就會產生變化。</p><p><strong>重繪 (repaint)</strong></p><p>改變了某個元素的背景色、文字顏色等等不會影響周圍元素的位置變化時，就會發生重繪。</p><p>每次重繪後，瀏覽器還需要合併渲染層並輸出到屏幕上。</p><p>迴流的成本要比重繪高很多，所以我們應該儘量避免產生迴流。</p><p>比如：</p><ul><li><code>display:none</code> 會觸發迴流，而 <code>visibility:hidden</code> 只會觸發重繪。</li></ul><h5 id="JavaScript-編譯執行"><a href="#JavaScript-編譯執行" class="headerlink" title="JavaScript 編譯執行"></a>JavaScript 編譯執行</h5><p><strong>大致流程</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_3.png"></p><p>可以分為三個階段：</p><h6 id="詞法分析"><a href="#詞法分析" class="headerlink" title="詞法分析"></a>詞法分析</h6><p>JS 腳本加載完畢後，會首先進入語法分析階段，它首先會分析代碼塊的語法是否正確，不正確則拋出 “語法錯誤”，停止執行。</p><p>幾個步驟：</p><ul><li>分詞，例如將<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>這樣的詞法單元。</li><li>解析，將詞法單元轉換成抽象語法樹（AST）。</li><li>代碼生成，將抽象語法樹轉換成機器指令。</li></ul><h6 id="預編譯"><a href="#預編譯" class="headerlink" title="預編譯"></a>預編譯</h6><p>JS 有三種運行環境：</p><ul><li>全局環境</li><li>函數環境</li><li>eval</li></ul><p>每進入一個不同的運行環境都會創建一個對應的執行上下文，根據不同的上下文環境，形成一個函數調用棧，棧底永遠是全局執行上下文，棧頂則永遠是當前執行上下文。</p><p><strong>創建執行上下文</strong></p><p>創建執行上下文的過程中，主要做了以下三件事：</p><ul><li>創建變量對象<ul><li>參數、函數、變量</li></ul></li><li>建立作用域鏈<ul><li>確認當前執行環境是否能訪問變量</li></ul></li><li>確定 This 指向</li></ul><h6 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h6><p><strong>JS 線程</strong></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_7.png"></p><p>雖然 JS 是單線程的，但實際上參與工作的線程一共有四個：</p><blockquote><p>其中三個只是協助，只有 JS 引擎線程是真正執行的</p></blockquote><ul><li>JS 引擎線程：也叫 JS 內核，負責解析執行 JS 腳本程序的主線程，例如 V8 引擎</li><li>事件觸發線程：屬於瀏覽器內核線程，主要用於控制事件，例如鼠標、鍵盤等，當事件被觸發時，就會把事件的處理函數推進事件隊列，等待 JS 引擎線程執行</li><li>定時器觸發線程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用來計時，計時完畢後，則把定時器的處理函數推進事件隊列中，等待 JS 引擎線程。</li><li>HTTP 異步請求線程：通過 XMLHttpRequest 連接後，通過瀏覽器新開的一個線程，監控 readyState 狀態變更時，如果設置了該狀態的回調函數，則將該狀態的處理函數推進事件隊列中，等待 JS 引擎線程執行。</li></ul><p><strong>注：瀏覽器對同一域名的併發連接數是有限的，通常為 6 個。</strong></p><p><strong>宏任務</strong></p><p>分為：</p><ul><li>同步任務：按照順序執行，只有前一個任務完成後，才能執行後一個任務</li><li>異步任務：不直接執行，只有滿足觸發條件時，相關的線程將該異步任務推進任務隊列中，等待 JS 引擎主線程上的任務執行完畢時才開始執行，例如異步 Ajax、DOM 事件，setTimeout 等。</li></ul><p><strong>微任務</strong></p><p>微任務是 ES6 和 Node 環境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任務的執行在宏任務的同步任務之後，在異步任務之前。</p><p><img src= "/image/loading.gif" data-lazy-src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png"></p><p><strong>代碼例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;1&#39;); &#x2F;&#x2F; 宏任務 同步</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&#39;2&#39;); &#x2F;&#x2F; 宏任務 異步</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&#39;3&#39;); &#x2F;&#x2F; 宏任務 同步</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&#39;4&#39;) &#x2F;&#x2F; 微任務</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#39;5&#39;) &#x2F;&#x2F; 宏任務 同步</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代碼輸出順序為：1,3,5,4,2</p><h2 id="參考文檔"><a href="#參考文檔" class="headerlink" title="參考文檔"></a>參考文檔</h2><ul><li><a href="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN</a></li><li><a href="https://alistapart.com/article/tags-to-dom/">Tags to DOM</a></li><li><a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">徹底理解瀏覽器的緩存機制</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">瀏覽器的工作原理：新式網絡瀏覽器幕後揭祕</a></li><li><a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入淺出瀏覽器渲染原理</a></li><li><a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js 引擎的執行過程（一）</a></li><li>還有一些找不到了。。。。。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-butterfly 安裝文檔(一)快速開始</title>
      <link href="posts/21cfbf15/"/>
      <url>posts/21cfbf15/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>爲了方便集中管理和更新，Butterfly文檔已經遷移至<a href="https://demo.jerryc.me/">Butterfly網站</a>。<br>原<code>docs.jerryc.me</code>頁面也將會刪除<br>同時，Valine的相關評論已經遷移到到<a href="https://demo.jerryc.me/">Butterfly網站</a></p></div>]]></content>
      
      
      <categories>
          
          <category> Butterfly文檔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主題 </tag>
            
            <tag> 教程 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>設置Windows電腦自動關機</title>
      <link href="posts/19f9ade4/"/>
      <url>posts/19f9ade4/</url>
      
        <content type="html"><![CDATA[<p>為了減少長時間沉迷電腦而忘記時間，設置Windows電腦自動關機是必要的事。<br>在我的電腦裏，每到晚上10點都會自動關機。當然不會立刻關機，而是設置了1分鐘的預留時間給自己保存一些文檔資料。<br>Windows內建的Shutdown指令讓人很方便的對這些進行操作。<br>你有沒有試過在使用電腦處理一些事時，因為臨時需要外出，而又不能立刻關掉電腦，這時就可以使用Shutdown設置xx時間後自動關閉電腦。</p><h2 id="shutdown的一些參數"><a href="#shutdown的一些參數" class="headerlink" title="shutdown的一些參數"></a>shutdown的一些參數</h2><h3 id="1-寫法"><a href="#1-寫法" class="headerlink" title="1. 寫法"></a>1. 寫法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [&#x2F;i | &#x2F;l | &#x2F;s | &#x2F;sg | &#x2F;r | &#x2F;g | &#x2F;a | &#x2F;p | &#x2F;h | &#x2F;e | &#x2F;o] [&#x2F;hybrid] [&#x2F;soft] [&#x2F;fw] [&#x2F;f][&#x2F;m \\computer][&#x2F;t xxx][&#x2F;d [p|u:]xx:yy [&#x2F;c &quot;comment&quot;]]</span><br></pre></td></tr></table></figure><p>也可以寫成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [-i | -l | -s | -sg | -r | -g | -a | -p | -h | -e | -o] [-hybrid] [-soft] [-fw] [-f] [-m \\computer][-t xxx][-d [p|u:]xx:yy [-c &quot;comment&quot;]]</span><br></pre></td></tr></table></figure><h3 id="2-參數"><a href="#2-參數" class="headerlink" title="2. 參數"></a>2. 參數</h3><table><thead><tr><th>參數</th><th>描述</th></tr></thead><tbody><tr><td>No args</td><td>顯示説明。與輸入 /? 意義相同。</td></tr><tr><td>/?</td><td>顯示説明。與不輸入任何選項意義相同。</td></tr><tr><td>/i</td><td>顯示圖形化使用者介面 (GUI)。<br>這必須是第一個選項。</td></tr><tr><td>/l</td><td>登出。不能和 /m 或 /d 選項一起使用。</td></tr><tr><td>/s</td><td>將電腦關機。</td></tr><tr><td>/sg</td><td>將電腦關機。如有啟用自動重新啟動登入，<br>會在系統重新開機後自動登入並鎖定上一個互動使用者。<br>登入後，會重新啟動所有已註冊應用程式。</td></tr><tr><td>/r</td><td>將電腦完全關機並重新開機。</td></tr><tr><td>/g</td><td>將電腦完全關機並重新啟動。如有啟用自動重新啟動登入，<br>會在系統重新開機後自動登入並鎖定上一個互動使用者。<br>登入後，會重新啟動所有已註冊應用程式。</td></tr><tr><td>/a</td><td>中止系統關機。<br>只有在逾時期間可以使用這個選項。<br>與 /fw 結合以清除任何擱置中的開機到韌體作業。</td></tr><tr><td>/p</td><td>沒有逾時或警告就關閉本機電腦<br>能和 /d 與 /f 選項一起使用。</td></tr><tr><td>/h</td><td>讓本機電腦休眠。<br>能和 /f 選項一起使用。</td></tr><tr><td>/hybrid</td><td>執行電腦關機作業，並準備電腦以用於快速啟動。<br>必須搭配 /s 選項使用。</td></tr><tr><td>/fw</td><td>與關機選項結合，讓下一次開機能進入<br>韌體使用者介面。</td></tr><tr><td>/e</td><td>記錄電腦意外關機的理由。</td></tr><tr><td>/o</td><td>移至 [進階開機選項] 功能表並重新啟動電腦。<br> 必須搭配 /r 選項使用。</td></tr><tr><td>/m \computer</td><td>指定目標電腦。</td></tr><tr><td>/t xxx</td><td>將關機前的逾時期間設定為 xxx 秒。<br>有效的範圍是 0-315360000 (10 年)，預設值為 30。<br>若逾時期間大於 0，則會隱含 /f參數。</td></tr><tr><td>/c “comment”</td><td>為重新啟動或關機理由加上註解。<br>最多僅允許 512 個字元。</td></tr><tr><td>/f</td><td>強制關閉執行中的應用程式，而不事先警告使用者。<br>為 /t 參數指定大於 0 的值時，<br> 會隱含 /f 參數。</td></tr><tr><td>/d [p&#124;u:]xx:yy</td><td>提供重新啟動或關機的理由。<br> p 代表重新啟動或關機是已計劃的。<br> u 代表理由是由使用者所定義。<br> 若未指定 p 或 u，則重新啟動或關機<br> 是非計劃性。<br> xx 是主要的理由編號 (小於 256 的正整數)。<br> yy 是次要的理由編號 (小於 65536 的正整數)。</td></tr></tbody></table><p><code>shutdown /s /t 10</code>  指定10s後自動關機<br><code>shutdown /l /t 10</code>  指定10s後自動登出賬號<br><code>shutdown /i</code><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/shutdown_i.png" alt="shutdown -i"></p><h2 id="設置自動關機的方法"><a href="#設置自動關機的方法" class="headerlink" title="設置自動關機的方法"></a>設置自動關機的方法</h2><h3 id="1-通過工作排程器"><a href="#1-通過工作排程器" class="headerlink" title="1. 通過工作排程器"></a>1. 通過工作排程器</h3><ol><li>在 <code>本機</code> 右鍵鼠標並選擇管理。</li><li>點擊左邊的工作排程器<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/TaskScheduler.png" alt="工作排程器"></li><li>點擊右邊<code>動作</code>下的<code>建立基本工作</code><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/create_basic_task.png" alt="建立基本工作"></li><li>輸入名稱和描述<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/create_basic_task_process_1.png" alt="輸入名稱和描述"></li><li>選擇觸發程序時間（這裏選擇每天）<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/trigger.png" alt="選擇觸發程序時間"></li><li>設置開始的時間和間隔，間隔的數值要大於0<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/set_start_time.png" alt="設置開始的時間和間"></li><li>選擇<code>啟動程序</code><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/action.png" alt="選擇啟動程序"></li><li>程序或指令碼填寫<code>shutdown</code>或者點擊右邊的瀏覽，選擇shutdown.exe，會變成<code>C:\Windows\System32\shutdown.exe</code>。新增引數填<code>-s</code><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/start_a_program.png" alt="填寫程序或指令碼"></li><li>檢查所有填寫的資料的是否正確，點擊完成就可以了。這樣電腦就會按照你設定的時間，到時間後就會跳出提醒。<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/finish.png" alt="建立的基本工作詳情"></li></ol><h3 id="2-通過執行程序"><a href="#2-通過執行程序" class="headerlink" title="2. 通過執行程序"></a>2. 通過<code>執行</code>程序</h3><p>按<code>win</code>+<code>R</code>，打開<code>執行</code>程序，直接輸入shutdown指令。<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/Run_Command.png" alt="執行程序"></p><h3 id="3-通過CMD或者PowerShell"><a href="#3-通過CMD或者PowerShell" class="headerlink" title="3. 通過CMD或者PowerShell"></a>3. 通過<code>CMD</code>或者<code>PowerShell</code></h3><p>打開<code>CMD</code>或者<code>PowerShell</code>，然後直接輸入shutdown指令。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/cmd.png" alt="CMD"><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Set_Auto_Shutdown_in_Windows/powershell.png" alt="PowerShell"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows必裝軟件推薦</title>
      <link href="posts/59b77e20/"/>
      <url>posts/59b77e20/</url>
      
        <content type="html"><![CDATA[<p>Windows上的軟件數不勝數,同一類型的軟件眾多。到底哪一款才是適合你自己的，只有自己親自試用過才知道。以下是我比較喜歡的軟件，特別推薦給各位。</p><ol><li>下載工具：<a href="https://www.qbittorrent.org/">qBittorrent</a>和<a href="https://www.internetdownloadmanager.com/">Internet Download Manager</a></li><li>聊天軟件：<a href="https://tim.qq.com/index.html">tim</a>(雖然已經被騰訊放棄了，但是比起QQ那麼臃腫，這個好用點）和 <a href="https://www.microsoft.com/en-us/p/wechat-for-windows/9nblggh4slx7?activetab=pivot:overviewtab">微信</a>(store轉製版）</li><li>截圖軟件： <a href="https://zh.snipaste.com/">snipaste</a> 這個必須推薦</li><li>編輯器： <a href="https://code.visualstudio.com/">vscode</a></li><li>瀏覽器： <a href="https://www.google.com/chrome/">chrome</a></li><li>視頻播放器： <a href="https://potplayer.daum.net/">potplayer</a> 和 <a href="https://www.microsoft.com/store/productId/9NBLGGH5Q5FV">嗶哩嗶哩UWP</a></li><li>詞典： <a href="https://www.eudic.net/v4/en/app/eudic">歐陸詞典</a> 和 <a href="http://goldendict.org/">GoldenDict</a></li><li>筆記：<a href="https://products.office.com/zh-hk/onenote/digital-note-taking-app?rtc=1">onenote</a>  和 <a href="https://evernote.com/intl/zh-tw">evernote</a> (用這個截取網頁的內容，onenote的web clipper太差）</li><li>簡單視頻製作：<a href="https://www.adobe.com/hk_zh/products/premiere/free-trial-download.html">Adobe Premiere Pro</a> (編輯視頻） <a href="https://www.4kdownload.com/download">4K Video Downloader</a>（下載視頻） <a href="http://www.aegisub.org/">Aegisub</a> (製作字幕） <a href="https://sourceforge.net/projects/megui/">Megui</a>(壓制視頻）</li><li>搜索： <a href="https://www.voidtools.com/">everything</a></li><li>圖片查看： <a href="https://www.faststone.org/FSViewerDetail.htm">FastStone Image Viewer</a></li><li>壓縮軟件：<a href="https://www.rarlab.com/">winrar</a> (7zip也不錯，但是不能設置解壓完自動打開解壓的文件夾，只能放棄）</li><li>清理軟件： <a href="https://www.wisecleaner.com/wise-care-365.html">Wise Care 365</a>  和 <a href="https://www.ccleaner.com/">CCleaner</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 軟件推薦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 軟件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關於字符編碼，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）</title>
      <link href="posts/f5f84b52/"/>
      <url>posts/f5f84b52/</url>
      
        <content type="html"><![CDATA[<h1 id="關於字符編碼，你所需要知道的（ASCII-Unicode-Utf-8-GB2312…）"><a href="#關於字符編碼，你所需要知道的（ASCII-Unicode-Utf-8-GB2312…）" class="headerlink" title="關於字符編碼，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）"></a>關於字符編碼，你所需要知道的（ASCII,Unicode,Utf-8,GB2312…）</h1><blockquote><p>轉自 <a href="http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html">Kevin Yang</a></p></blockquote><p>字符編碼的問題看似很小，經常被技術人員忽視，但是很容易導致一些莫名其妙的問題。這裏總結了一下字符編碼的一些普及性的知識，希望對大家有所幫助。</p><h2 id="還是得從ASCII碼説起"><a href="#還是得從ASCII碼説起" class="headerlink" title="還是得從ASCII碼説起"></a>還是得從ASCII碼説起</h2><p>説到字符編碼，不得不説ASCII碼的簡史。計算機一開始發明的時候是用來解決數字計算的問題，後來人們發現，計算機還可以做更多的事，例如文本處理。但由於計算機只識“數”，因此人們必須告訴計算機哪個數字來代表哪個特定字符，例如65代表字母‘A’，66代表字母‘B’，以此類推。但是<strong>計算機之間字符-數字的對應關係必須得一致，否則就會造成同一段數字在不同計算機上顯示出來的字符不一樣。</strong>因此美國國家標準協會ANSI制定了一個標準，規定了常用字符的集合以及每個字符對應的編號，這就是ASCII字符集（Character Set），也稱ASCII碼。</p><p>當時的計算機普遍使用8比特字節作為最小的存儲和處理單元，加之當時用到的字符也很少，26個大小寫英文字母還有數字再加上其他常用符號，也不到100個，因此使用7個比特位就可以高效的存儲和處理ASCII碼，剩下最高位1比特被用作一些通訊系統的奇偶校驗。</p><blockquote><p>注意，字節代表系統能夠處理的最小單位，不一定是8比特。只是現代計算機的事實標準就是用8比特來代表一個字節。在很多技術規格文獻中，為了避免產生歧義，更傾向於使用8位組（Octet）而不是字節（Byte）這個術語來強調8個比特的二進制流。下文中為了便於理解，我會延用大家熟悉的“字節”這個概念。</p></blockquote><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/ASCII_table.png" alt="ASCII table"></p><p>ASCII字符集由95個可打印字符（0x20-0x7E）和33個控制字符（0x00-0x19，0x7F）組成。可打印字符用於顯示在輸出設備上，例如熒屏或者打印紙上，控制字符用於向計算機發出一些特殊指令，例如0x07會讓計算機發出嗶的一聲，0x00通常用於指示字符串的結束，0x0D和0x0A用於指示打印機的打印針頭退到行首（回車）並移到下一行（換行）。</p><p>那時候的字符編解碼系統非常簡單，就是簡單的查表過程。例如將字符序列編碼為二進制流寫入存儲設備，只需要在ASCII字符集中依次找到字符對應的字節，然後直接將該字節寫入存儲設備即可。解碼二進制流的過程也是類似。</p><h2 id="OEM字符集的衍生"><a href="#OEM字符集的衍生" class="headerlink" title="OEM字符集的衍生"></a>OEM字符集的衍生</h2><p>當計算機開始發展起來的時候，人們逐漸發現，ASCII字符集裏那可憐的128個字符已經不能再滿足他們的需求了。人們就在想，一個字節能夠表示的數字（編號）有256個，而ASCII字符只用到了0x00~0x7F，也就是佔用了前128個，後面128個數字不用白不用，因此很多人打起了後面這128個數字的主意。可是問題在於，很多人同時有這樣的想法，但是大家對於0x80-0xFF這後面的128個數字分別對應什麼樣的字符，卻有各自的想法。這就導致了當時銷往世界各地的機器上出現了大量各式各樣的OEM字符集。</p><p>下面這張表是IBM-PC機推出的其中一個OEM字符集，字符集的前128個字符和ASCII字符集的基本一致（為什麼説基本一致呢，是因為前32個控制字符在某些情況下會被IBM-PC機當作可打印字符解釋），後面128個字符空間加入了一些歐洲國家用到的重音字符，以及一些用於畫線條畫的字符。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/IBM_PC_OEM_character_set.png" alt="IBM-PC OEM字符集"></p><p>事實上，大部分OEM字符集是兼容ASCII字符集的，也就是説，大家對於0x00<del>0x7F這個範圍的解釋基本是相同的，而對於後半部分0x80</del>0xFF的解釋卻不一定相同。甚至有時候同樣的字符在不同OEM字符集中對應的字節也是不同的。</p><p>不同的OEM字符集導致人們無法跨機器交流各種文檔。例如職員甲發了一封簡歷résumés給職員乙，結果職員乙看到的卻是r?sum?s，因為é字符在職員甲機器上的OEM字符集中對應的字節是0x82，而在職員乙的機器上，由於使用的OEM字符集不同，對0x82字節解碼後得到的字符卻是?。</p><h2 id="多字節字符集（MBCS）和中文字符集"><a href="#多字節字符集（MBCS）和中文字符集" class="headerlink" title="多字節字符集（MBCS）和中文字符集"></a>多字節字符集（MBCS）和中文字符集</h2><p>上面我們提到的字符集都是基於單字節編碼，也就是説，一個字節翻譯成一個字符。這對於拉丁語系國家來説可能沒有什麼問題，因為他們通過擴展第8個比特，就可以得到256個字符了，足夠用了。但是對於亞洲國家來説，256個字符是遠遠不夠用的。因此這些國家的人為了用上電腦，又要保持和ASCII字符集的兼容，就發明了多字節編碼方式，相應的字符集就稱為多字節字符集。例如中國使用的就是雙字節字符集編碼（DBCS，Double Byte Character Set）。</p><p>對於單字節字符集來説，代碼頁中只需要有一張碼錶即可，上面記錄着256個數字代表的字符。程序只需要做簡單的查表操作就可以完成編解碼的過程。</p><blockquote><p>代碼頁是字符集編碼的具體實現，你可以把他理解為一張“字符-字節”映射表，通過查表實現“字符-字節”的翻譯。下面會有更詳細的描述。</p></blockquote><p>而對於多字節字符集，代碼頁中通常會有很多碼錶。那麼程序怎麼知道該使用哪張碼錶去解碼二進制流呢？答案是，<strong>根據第一個字節來選擇不同的碼錶進行解析。</strong></p><p>例如目前最常用的中文字符集GB2312，涵蓋了所有簡體字符以及一部分其他字符；GBK（K代表擴展的意思）則在GB2312的基礎上加入了對繁體字符等其他非簡體字符（GB18030字符集不是雙字節字符集，我們在講Unicode的時候會提到）。這兩個字符集的字符都是使用1-2個字節來表示。Windows系統採用936代碼頁來實現對GBK字符集的編解碼。在解析字節流的時候，如果遇到字節的最高位是0的話，那麼就使用936代碼頁中的第1張碼錶進行解碼，這就和單字節字符集的編解碼方式一致了。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Codepage_936.png" alt="936代碼頁"></p><p>當字節的高位是1的時候，確切的説，當第一個字節位於0x81–0xFE之間時，根據第一個字節不同找到代碼頁中的相應的碼錶，例如當第一個字節是0x81，那麼對應936中的下面這張碼錶：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Codepage_936_2.png" alt="936代碼頁2"></p><p>（關於936代碼頁中完整的碼錶信息，參見MSDN：<a href="http://msdn.microsoft.com/en-us/library/cc194913%28v=MSDN.10%29.aspx.%EF%BC%89">http://msdn.microsoft.com/en-us/library/cc194913%28v=MSDN.10%29.aspx.）</a></p><p>按照936代碼頁的碼錶，當程序遇到連續字節流0x81 0x40的時候，就會解碼為“丂”字符。</p><h2 id="ANSI標準、國家標準、ISO標準"><a href="#ANSI標準、國家標準、ISO標準" class="headerlink" title="ANSI標準、國家標準、ISO標準"></a>ANSI標準、國家標準、ISO標準</h2><p>不同ASCII衍生字符集的出現，讓文檔交流變得非常困難，因此各種組織都陸續進行了標準化流程。例如美國ANSI組織制定了ANSI標準字符編碼（注意，<strong>我們現在通常説到ANSI編碼，通常指的是平台的默認編碼，例如英文操作系統中是ISO-8859-1，中文系統是GBK</strong>），ISO組織制定的各種ISO標準字符編碼，還有各國也會制定一些國家標準字符集，例如中國的GBK，GB2312和GB18030。</p><p>操作系統在發佈的時候，通常會往機器裏預裝這些標準的字符集還有平台專用的字符集，這樣只要你的文檔是使用標準字符集編寫的，通用性就比較高了。例如你用GB2312字符集編寫的文檔，在中國大陸內的任何機器上都能正確顯示。同時，我們也可以在一台機器上閲讀多個國家不同語言的文檔了，前提是本機必須安裝該文檔使用的字符集。</p><h2 id="Unicode的出現"><a href="#Unicode的出現" class="headerlink" title="Unicode的出現"></a>Unicode的出現</h2><p>雖然通過使用不同字符集，我們可以在一台機器上查閲不同語言的文檔，但是我們仍然無法解決一個問題：<strong>在一份文檔中顯示所有字符</strong>。為了解決這個問題，我們需要一個全人類達成共識的巨大的字符集，這就是Unicode字符集。</p><h3 id="Unicode字符集概述"><a href="#Unicode字符集概述" class="headerlink" title="Unicode字符集概述"></a>Unicode字符集概述</h3><p>Unicode字符集涵蓋了目前人類使用的所有字符，併為每個字符進行統一編號，分配唯一的字符碼（Code Point）。Unicode字符集將所有字符按照使用上的頻繁度劃分為17個層面（Plane），每個層面上有2<sup>16</sup>=65536個字符碼空間。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Unicode.png" alt="Unicode"></p><p>其中第0個層面BMP，基本涵蓋了當今世界用到的所有字符。其他的層面要麼是用來表示一些遠古時期的文字，要麼是留作擴展。我們平常用到的Unicode字符，一般都是位於BMP層面上的。目前Unicode字符集中尚有大量字符空間未使用。</p><h3 id="編碼系統的變化"><a href="#編碼系統的變化" class="headerlink" title="編碼系統的變化"></a>編碼系統的變化</h3><p>在Unicode出現之前，所有的字符集都是和具體編碼方案綁定在一起的，都是直接將字符和最終字節流綁定死了，例如ASCII編碼系統規定使用7比特來編碼ASCII字符集；GB2312以及GBK字符集，限定了使用最多2個字節來編碼所有字符，並且規定了字節序。這樣的編碼系統通常用簡單的查表，也就是通過代碼頁就可以直接將字符映射為存儲設備上的字節流了。例如下面這個例子：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Coding_system.png" alt="編碼系統"></p><p>這種方式的缺點在於，字符和字節流之間耦合得太緊密了，從而限定了字符集的擴展能力。假設以後火星人入住地球了，要往現有字符集中加入火星文就變得很難甚至不可能了，而且很容易破壞現有的編碼規則。</p><p>因此Unicode在設計上考慮到了這一點，將字符集和字符編碼方案分離開。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Character_encoding_system.png" alt="字符編碼系統"></p><p>也就是説，<strong>雖然每個字符在Unicode字符集中都能找到唯一確定的編號（字符碼，又稱Unicode碼），但是決定最終字節流的卻是具體的字符編碼</strong>。例如同樣是對Unicode字符“A”進行編碼，UTF-8字符編碼得到的字節流是0x41，而UTF-16（大端模式）得到的是0x00 0x41。</p><h3 id="常見的Unicode編碼"><a href="#常見的Unicode編碼" class="headerlink" title="常見的Unicode編碼"></a>常見的Unicode編碼</h3><h4 id="UCS-2-UTF-16"><a href="#UCS-2-UTF-16" class="headerlink" title="UCS-2/UTF-16"></a>UCS-2/UTF-16</h4><p>如果要我們來實現Unicode字符集中BMP字符的編碼方案，我們會怎麼實現？由於BMP層面上有2<sup>16</sup>=65536個字符碼，因此我們只需要兩個字節就可以完全表示這所有的字符了。</p><p>舉個例子，“中”的Unicode字符碼是0x4E2D(01001110 00101101)，那麼我們可以編碼為01001110 00101101（大端）或者00101101 01001110 （小端）。</p><p>UCS-2和UTF-16對於BMP層面的字符均是使用2個字節來表示，並且編碼得到的結果完全一致。不同之處在於，<strong>UCS-2最初設計的時候只考慮到BMP字符，因此使用固定2個字節長度，也就是説，他無法表示Unicode其他層面上的字符，而UTF-16為了解除這個限制，支持Unicode全字符集的編解碼，採用了變長編碼，最少使用2個字節，如果要編碼BMP以外的字符，則需要4個字節結對</strong>，這裏就不討論那麼遠，有興趣可以參考維基百科：<a href="https://en.wikipedia.org/wiki/UTF-16">UTF-16/UCS-2</a>。</p><p>Windows從NT時代開始就採用了UTF-16編碼，很多流行的編程平台，例如.Net，Java，Qt還有Mac下的Cocoa等都是使用UTF-16作為基礎的字符編碼。例如代碼中的字符串，在內存中相應的字節流就是用UTF-16編碼過的。</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8應該是目前應用最廣泛的一種Unicode編碼方案。由於UCS-2/UTF-16對於ASCII字符使用兩個字節進行編碼，存儲和處理效率相對低下，並且由於ASCII字符經過UTF-16編碼後得到的兩個字節，高字節始終是0x00，很多C語言的函數都將此字節視為字符串末尾從而導致無法正確解析文本。因此一開始推出的時候遭到很多西方國家的抵觸，大大影響了Unicode的推行。後來聰明的人們發明了UTF-8編碼，解決了這個問題。</p><p>UTF-8編碼方案採用1-4個字節來編碼字符，方法其實也非常簡單。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/UTF-8_encoding.png" alt="UTF-8編碼"></p><p>（上圖中的x代表Unicode碼的低8位，y代表高8位）</p><p><strong>對於ASCII字符的編碼使用單字節，和ASCII編碼一摸一樣，這樣所有原先使用ASCII編解碼的文檔就可以直接轉到UTF-8編碼了。對於其他字符，則使用2-4個字節來表示，其中，首字節前置1的數目代表正確解析所需要的字節數，剩餘字節的高2位始終是10。例如首字節是1110yyyy，前置有3個1，説明正確解析總共需要3個字節，需要和後面2個以10開頭的字節結合才能正確解析得到字符。</strong></p><p>關於UTF-8的更多信息，參考維基百科：<a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>。</p><h4 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h4><p>任何能夠將Unicode字符映射為字節流的編碼都屬於Unicode編碼。中國的GB18030編碼，覆蓋了Unicode所有的字符，因此也算是一種Unicode編碼。只不過他的編碼方式並不像UTF-8或者UTF-16一樣，將Unicode字符的編號通過一定的規則進行轉換，而只能通過查表的手段進行編碼。</p><p>關於GB18030的更多信息，參考：<a href="https://en.wikipedia.org/wiki/GB_18030">GB18030</a>。</p><h3 id="Unicode相關的常見問題"><a href="#Unicode相關的常見問題" class="headerlink" title="Unicode相關的常見問題"></a>Unicode相關的常見問題</h3><ul><li><p>Unicode是兩個字節嗎？<br>Unicode只是定義了一個龐大的、全球通用的字符集，併為每個字符規定了唯一確定的編號，具體存儲為什麼樣的字節流，取決於字符編碼方案。推薦的Unicode編碼是UTF-16和UTF-8。</p></li><li><p>帶簽名的UTF-8指的是什麼意思？</p><p>帶簽名指的是字節流以BOM標記開始。很多軟件會“智能”的探測當前字節流使用的字符編碼，這種探測過程出於效率考慮，通常會提取字節流前面若干個字節，看看是否符合某些常見字符編碼的編碼規則。由於UTF-8和ASCII編碼對於純英文的編碼是一樣的，無法區分開來，因此通過在字節流最前面添加BOM標記可以告訴軟件，當前使用的是Unicode編碼，判別成功率就十分準確了。但是需要注意，不是所有軟件或者程序都能正確處理BOM標記，例如PHP就不會檢測BOM標記，直接把它當普通字節流解析了。因此如果你的PHP文件是採用帶BOM標記的UTF-8進行編碼的，那麼有可能會出現問題。</p></li><li><p>Unicode編碼和以前的字符集編碼有什麼區別？</p><p>早期字符編碼、字符集和代碼頁等概念都是表達同一個意思。例如GB2312字符集、GB2312編碼，936代碼頁，實際上説的是同個東西。但是對於Unicode則不同，Unicode字符集只是定義了字符的集合和唯一編號，Unicode編碼，則是對UTF-8、UCS-2/UTF-16等具體編碼方案的統稱而已，並不是具體的編碼方案。所以當需要用到字符編碼的時候，你可以寫gb2312，codepage936，utf-8，utf-16，但請不要寫unicode（看過別人在網頁的meta標籤裏頭寫charset=unicode，有感而發）。</p></li></ul><h3 id="亂碼問題"><a href="#亂碼問題" class="headerlink" title="亂碼問題"></a>亂碼問題</h3><p>亂碼指的是程序顯示出來的字符文本無法用任何語言去解讀。一般情況下會包含大量?。亂碼問題是所有計算機用户或多或少會遇到的問題。<strong>造成亂碼的原因就是因為使用了錯誤的字符編碼去解碼字節流，因此當我們在思考任何跟文本顯示有關的問題時，請時刻保持清醒：當前使用的字符編碼是什麼</strong>。只有這樣，我們才能正確分析和處理亂碼問題。</p><p>例如最常見的網頁亂碼問題。如果你是網站技術人員，遇到這樣的問題，需要檢查以下原因：</p><ul><li>服務器返回的響應頭Content-Type沒有指明字符編碼</li><li>網頁內是否使用META HTTP-EQUIV標籤指定了字符編碼</li><li>網頁文件本身存儲時使用的字符編碼和網頁聲明的字符編碼是否一致<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Check_webpage_garbled.png" alt="檢查網頁亂碼"></li></ul><p>注意，網頁解析的過程如果使用的字符編碼不正確，還可能會導致腳本或者樣式表出錯。具體細節可以參考我以前寫過的文章：<a href="http://www.imkevinyang.com/2009/08/%E6%96%87%E6%A1%A3%E5%AD%97%E7%AC%A6%E9%9B%86%E5%AF%BC%E8%87%B4%E7%9A%84%E8%84%9A%E6%9C%AC%E9%94%99%E8%AF%AF.html">文檔字符集導致的腳本錯誤</a>和<a href="http://www.imkevinyang.com/2009/11/asp-net%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html">Asp.Net頁面的編碼問題</a>。</p><p>不久前看到某技術論壇有人反饋，WinForm程序使用Clipboard類的GetData方法去訪問剪切板中的HTML內容時會出現亂碼的問題，我估計也是由於WinForm在獲取HTML文本的時候沒有用對正確的字符編碼導致的。Windows剪貼板只支持UTF-8編碼，也就是説你傳入的文本都會被UTF-8編解碼。這樣一來，只要兩個程序都是調用Windows剪切板API編程的話，那麼複製粘貼的過程中不會出現亂碼。除非一方在獲取到剪貼板數據之後使用了錯誤的字符編碼進行解碼，才會得到亂碼（我做了簡單的WinForm剪切板編程實驗，發現GetData使用的是系統默認編碼，而不是UTF-8編碼）。</p><p>關於亂碼中出現?或者?，這裏需要額外提一下，<strong>當程序使用特定字符編碼解析字節流的時候，一旦遇到無法解析的字節流時，就會用解碼失敗替換字符或者?來替代。因此，一旦你最終解析得到的文本包含這樣的字符，而你又無法得到原始字節流的時候，説明正確的信息已經徹底丟失了，嘗試任何字符編碼都無法從這樣的字符文本中還原出正確的信息來</strong>。</p><h3 id="必要的術語解釋"><a href="#必要的術語解釋" class="headerlink" title="必要的術語解釋"></a>必要的術語解釋</h3><p><strong>字符集（Character Set）</strong>，字面上的理解就是字符的集合，例如ASCII字符集，定義了128個字符；GB2312定義了7445個字符。而<strong>計算機系統中提到的字符集準確來説，指的是已編號的字符的有序集合（不一定是連續）</strong>。</p><p><strong>字符碼（Code Point）</strong>指的就是字符集中每個字符的數字編號。例如ASCII字符集用0-127這連續的128個數字分別表示128個字符；GBK字符集使用區位碼的方式為每個字符編號，首先定義一個94X94的矩陣，行稱為“區”，列稱為“位”，然後將所有國標漢字放入矩陣當中，這樣每個漢字就可以用唯一的“區位”碼來標識了。例如“中”字被放到54區第48位，因此字符碼就是5448。而Unicode中將字符集按照一定的類別劃分到0~16這17個層面（Planes）中，每個層面中擁有2<sup>16</sup>=65536個字符碼，因此Unicode總共擁有的字符碼，也即是Unicode的字符空間總共有17*65536=1114112。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/About_Character_Encoding/Unicode_Basic_code_structure.png" alt="Unicode Basic code structure"></p><p><strong>編碼</strong>的過程是將字符轉換成字節流。</p><p><strong>解碼</strong>的過程是將字節流解析為字符。</p><p><strong>字符編碼（Character Encoding）</strong>是將字符集中的字符碼映射為字節流的一種具體實現方案。例如ASCII字符編碼規定使用單字節中低位的7個比特去編碼所有的字符。例如‘A’的編號是65，用單字節表示就是0x41，因此寫入存儲設備的時候就是b’01000001’。GBK編碼則是將區位碼（GBK的字符碼）中的區碼和位碼的分別加上0xA0（160）的偏移（之所以要加上這樣的偏移，主要是為了和ASCII碼兼容），例如剛剛提到的“中”字，區位碼是5448，十六進制是0x3630，區碼和位碼分別加上0xA0的偏移之後就得到0xD6D0，這就是“中”字的GBK編碼結果。</p><p><strong>代碼頁（Code Page）</strong>一種字符編碼具體形式。早期字符相對少，因此通常會使用類似表格的形式將字符直接映射為字節流，然後通過查表的方式來實現字符的編解碼。現代操作系統沿用了這種方式。例如Windows使用936代碼頁、Mac系統使用EUC-CN代碼頁實現GBK字符集的編碼，名字雖然不一樣，但對於同一漢字的編碼肯定是一樣的。</p><p><strong>大小端</strong>的説法源自《格列佛遊記》。我們知道，雞蛋通常一端大一端小，小人國的人們對於剝蛋殼時應從哪一端開始剝起有着不一樣的看法。同樣，計算機界對於傳輸多字節字（由多個字節來共同表示一個數據類型）時，是先傳高位字節（大端）還是先傳低位字節（小端）也有着不一樣的看法，這就是計算機裏頭大小端模式的由來了。無論是寫文件還是網絡傳輸，實際上都是往流設備進行寫操作的過程，而且這個寫操作是從流的低地址向高地址開始寫（這很符合人的習慣），對於多字節字來説，如果先寫入高位字節，則稱作大端模式。反之則稱作小端模式。也就是説，大端模式下，字節序和流設備的地址順序是相反的，而小端模式則是相同的。一般網絡協議都採用大端模式進行傳輸，windows操作系統採用Utf-16小端模式。</p><p>參考鏈接：</p><ol><li><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a></li><li><a href="http://developers.sun.com/dev/gadc/technicalpublications/articles/gb18030.html">http://developers.sun.com/dev/gadc/technicalpublications/articles/gb18030.html</a></li><li><a href="http://en.wikipedia.org/wiki/Universal_Character_Set">http://en.wikipedia.org/wiki/Universal_Character_Set</a></li><li><a href="http://en.wikipedia.org/wiki/Code_page">http://en.wikipedia.org/wiki/Code_page</a></li></ol><h1 id="Unicode-和-UTF-8-有什么区别？"><a href="#Unicode-和-UTF-8-有什么区别？" class="headerlink" title="Unicode 和 UTF-8 有什么区别？"></a>Unicode 和 UTF-8 有什么区别？</h1><blockquote><p>轉發自知乎 盛世唐朝 <a href="https://www.zhihu.com/question/23374078">https://www.zhihu.com/question/23374078</a></p></blockquote><p>很久很久以前，有一群人，他們決定用8個可以開合的晶體管來組合成不同的狀態，以表示世界上的萬物。他們看到8個開關狀態是好的，於是他們把這稱為”<strong>字節</strong>“。再後來，他們又做了一些可以處理這些字節的機器，機器開動了，可以用字節來組合出很多狀態，狀態開始變來變去。他們看到這樣是好的，於是它們就這機器稱為”<strong>計算機</strong>“。</p><p>開始計算機只在美國用。八位的字節一共可以組合出256(2的8次方)種不同的狀態。<br>他們把其中的編號從0開始的32種狀態分別規定了特殊的用途，一但終端、打印機遇上約定好的這些字節被傳過來時，就要做一些約定的動作：<br>遇上0×10, 終端就換行；<br>遇上0×07, 終端就向人們嘟嘟叫；<br>遇上0x1b, 打印機就打印反白的字，或者終端就用彩色顯示字母。<br>他們看到這樣很好，於是就把這些0×20以下的字節狀態稱為”控制碼”。他們又把所有的空<br>格、標點符號、數字、大小寫字母分別用連續的字節狀態表示，一直編到了第127號，這樣計算機就可以用不同字節來存儲英語的文字了。大家看到這樣，都感覺很好，於是大家都把這個方案叫做 <strong>ANSI</strong> 的”Ascii”編碼（American Standard Code for Information Interchange，美國信息互換標準代碼）。當時世界上所有的計算機都用同樣的<strong>ASCII</strong>方案來保存英文文字。</p><p>後來，就像建造巴比倫塔一樣，世界各地都開始使用計算機，但是很多國家用的不是英文，他們的字母裏有許多是ASCII裏沒有的，為了可以在計算機保存他們的文字，他們決定採用 127號之後的空位來表示這些新的字母、符號，還加入了很多畫表格時需要用下到的橫線、豎線、交叉等形狀，一直把序號編到了最後一個狀態255。從128 到255這一頁的字符集被稱”<strong>擴展字符集</strong>“。從此之後，貪婪的人類再沒有新的狀態可以用了，美帝國主義可能沒有想到還有第三世界國家的人們也希望可以用到計算機吧！</p><p>等中國人們得到計算機時，已經沒有可以利用的字節狀態來表示漢字，況且有6000多個常用漢字需要保存呢。但是這難不倒智慧的中國人民，我們不客氣地把那些127號之後的奇異符號們直接取消掉, 規定：一個小於127的字符的意義與原來相同，但兩個大於127的字符連在一起時，就表示一個漢字，前面的一個字節（他稱之為高字節）從0xA1用到0xF7，後面一個字節（低字節）從0xA1到0xFE，這樣我們就可以組合出大約7000多個簡體漢字了。在這些編碼裏，我們還把數學符號、羅馬希臘的字母、日文的假名們都編進去了，連在 ASCII 裏本來就有的數字、標點、字母都統統重新編了兩個字節長的編碼，這就是常説的”全角”字符，而原來在127號以下的那些就叫”半角”字符了。中國人民看到這樣很不錯，於是就把這種漢字方案叫做 “<strong>GB2312</strong>“。GB2312 是對 ASCII 的中文擴展。</p><p>但是中國的漢字太多了，我們很快就就發現有許多人的人名沒有辦法在這裏打出來，特別是某些很會麻煩別人的國家領導人。於是我們不得不繼續把GB2312 沒有用到的碼位找出來老實不客氣地用上。後來還是不夠用，於是乾脆不再要求低字節一定是127號之後的內碼，只要第一個字節是大於127就固定表示這是一個漢字的開始，不管後面跟的是不是擴展字符集裏的內容。結果擴展之後的編碼方案被稱為<strong>GBK</strong> 標準，GBK包括了GB2312 的所有內容，同時又增加了近20000個新的漢字（包括繁體字）和符號。 後來少數民族也要用電腦了，於是我們再擴展，又加了幾千個新的少數民族的字，GBK擴成了 <strong>GB18030</strong>。從此之後，中華民族的文化就可以在計算機時代中傳承了。 中國的程序員們看到這一系列漢字編碼的標準是好的，於是通稱他們叫做 “<strong>DBCS</strong>“（Double Byte Charecter Set 雙字節字符集）。在DBCS系列標準裏，最大的特點是兩字節長的漢字字符和一字節長的英文字符並存於同一套編碼方案裏，因此他們寫的程序為了支持中文處理，必須要注意字串裏的每一個字節的值，如果這個值是大於127的，那麼就認為一個雙字節字符集裏的字符出現了。那時候凡是受過加持，會編程的計算機僧侶們都要每天念下面這個咒語數百遍： “一個漢字算兩個英文字符！一個漢字算兩個英文字符……”</p><p>因為當時各個國家都像中國這樣搞出一套自己的編碼標準，結果互相之間誰也不懂誰的編碼，誰也不支持別人的編碼，連大陸和台灣這樣只相隔了150海里，使用着同一種語言的兄弟地區，也分別採用了不同的 DBCS 編碼方案——當時的中國人想讓電腦顯示漢字，就必須裝上一個”漢字系統”，專門用來處理漢字的顯示、輸入的問題，像是那個台灣的愚昧封建人士寫的算命程序就必須加裝另一套支持 BIG5 編碼的什麼”倚天漢字系統”才可以用，裝錯了字符系統，顯示就會亂了套！這怎麼辦？而且世界民族之林中還有那些一時用不上電腦的窮苦人民，他們的文字又怎麼辦？ 真是計算機的巴比倫塔命題啊！</p><p>正在這時，大天使加百列及時出現了——一個叫 ISO（國際標誰化組織）的國際組織決定着手解決這個問題。他們採用的方法很簡單：廢了所有的地區性編碼方案，重新搞一個包括了地球上所有文化、所有字母和符號 的編碼！他們打算叫它”Universal Multiple-Octet Coded Character Set”，簡稱 <strong>UCS</strong>, 俗稱 “<strong>unicode</strong>“。</p><p>unicode開始制訂時，計算機的存儲器容量極大地發展了，空間再也不成為問題了。於是 ISO 就直接規定必須用兩個字節，也就是16位來統一表示所有的字符，對於ASCII裏的那些”半角”字符，unicode包持其原編碼不變，只是將其長度由原來的8位擴展為16位，而其他文化和語言的字符則全部重新統一編碼。由於”半角”英文符號只需要用到低8位，所以其高8位永遠是0，因此這種大氣的方案在保存英文文本時會多浪費一倍的空間。</p><p>這時候，從舊社會裏走過來的程序員開始發現一個奇怪的現象：他們的 strlen 函數靠不住了，一個漢字不再是相當於兩個字符了，而是一個！是的，從unicode開始，無論是半角的英文字母，還是全角的漢字，它們都是統一的”<strong>一個字符</strong>“！同時，也都是統一的”<strong>兩個字節</strong>“，請注意”<strong>字符</strong>“和”<strong>字節</strong>“兩個術語的不同，”<strong>字節</strong>“是一個8位的物理存貯單元，而”<strong>字符</strong>“則是一個文化相關的符號。在unicode中，一個字符就是兩個字節。一個漢字算兩個英文字符的時代已經快過去了。</p><p>unicode同樣也不完美，這裏就有兩個的問題，一個是，如何才能區別unicode和ascii？計算機怎麼知道三個字節表示一個符號，而不是分別表示三個符號呢？第二個問題是，我們已經知道，英文字母只用一個字節表示就夠了，如果unicode統一規定，每個符號用三個或四個字節表示，那麼每個英文字母前都必然有二到三個字節是0，這對於存儲空間來説是極大的浪費，文本文件的大小會因此大出二三倍，這是難以接受的。</p><p>unicode在很長一段時間內無法推廣，直到互聯網的出現，為解決unicode如何在網絡上傳輸的問題，於是面向傳輸的眾多 <strong>UTF</strong>（UCS Transfer Format）標準出現了，顧名思義，<strong>UTF-8</strong>就是每次8個位傳輸數據，而<strong>UTF-16</strong>就是每次16個位。UTF-8就是在互聯網上使用最廣的一種unicode的實現方式，這是為傳輸而設計的編碼，並使編碼無國界，這樣就可以顯示全世界上所有文化的字符了。UTF-8最大的一個特點，就是它是一種變長的編碼方式。它可以使用1~4個字節表示一個符號，根據不同的符號而變化字節長度，當字符在ASCII碼的範圍時，就用一個字節表示，保留了ASCII字符一個字節的編碼做為它的一部分，注意的是unicode一箇中文字符佔2個字節，而UTF-8一箇中文字符佔3個字節）。從unicode到utf-8並不是直接的對應，而是要過一些算法和規則來轉換。</p><table><thead><tr><th>Unicode符號範圍(十六進制)</th><th>UTF-8編碼方式（二進制）</th></tr></thead><tbody><tr><td>0000 0000-0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0000 0080-0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0000 0800-0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0001 0000-0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>最後簡單總結一下：</p><ul><li>中國人民通過對 ASCII 編碼的中文擴充改造，產生了 GB2312 編碼，可以表示6000多個常用漢字。</li><li>漢字實在是太多了，包括繁體和各種字符，於是產生了 GBK 編碼，它包括了 GB2312 中的編碼，同時擴充了很多。</li><li>中國是個多民族國家，各個民族幾乎都有自己獨立的語言系統，為了表示那些字符，繼續把 GBK 編碼擴充為 GB18030 編碼。</li><li>每個國家都像中國一樣，把自己的語言編碼，於是出現了各種各樣的編碼，如果你不安裝相應的編碼，就無法解釋相應編碼想表達的內容。</li><li>終於，有個叫 ISO 的組織看不下去了。他們一起創造了一種編碼 UNICODE ，這種編碼非常大，大到可以容納世界上任何一個文字和標誌。所以只要電腦上有 UNICODE 這種編碼系統，無論是全球哪種文字，只需要保存文件的時候，保存成 UNICODE 編碼就可以被其他電腦正常解釋。</li><li>UNICODE 在網絡傳輸中，出現了兩個標準 UTF-8 和 UTF-16，分別每次傳輸 8個位和 16個位。於是就會有人產生疑問，UTF-8 既然能保存那麼多文字、符號，為什麼國內還有這麼多使用 GBK 等編碼的人？因為 UTF-8 等編碼體積比較大，佔電腦空間比較多，如果面向的使用人群絕大部分都是中國人，用 GBK 等編碼也可以。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的新浪圖床工具推薦 - Weibo-Picture-Store</title>
      <link href="posts/d786a301/"/>
      <url>posts/d786a301/</url>
      
        <content type="html"><![CDATA[<div class="note danger"><p>2019年5月28號更新<br>微博圖床已經開始現在外鏈了，導致在網站上使用微博圖床的圖片無法顯示，如果使用微博作爲圖床的，應考慮轉向其它的圖床。</p></div><p>對於運營靜態網站的人來説，圖片存儲在哪裏是一個值得深思的問題。<br>要考慮到連接速度和存儲持久問題。<br>像七牛、騰訊雲這些服務商，想要使用存儲服務，就需要付費使用。<br>就算有提供免費的存儲，但奈何存儲空間大小限制，加上要實名認證，就足以將人拒之門外。<br>只能考慮一些即免費又沒有空間限制的服務商。<br>國外的一些圖片上傳網站考慮到在中國大陸的連接速度和有可能被和諧的問題，暫時不考慮。<br>像sm.ms這些圖床，因爲怕隨時會關掉而導致所有鏈接失效，同時上傳後又沒有備份，所以也在排除之外。<br>偶然在Github上看到這個新浪圖床上傳工具，有上傳存儲記錄。同時，新浪作爲一個用戶量很大的網站，也不用擔心會被關閉的問題。</p><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>這個圖床上傳工具叫做 Weibo-Picture-Store,由<a href="https://github.com/Semibold">Semibold</a>開發。是一款上傳圖片到微博並生成外鏈的 Chrome 瀏覽器擴展。</p><blockquote><p>chrome webstore 下載地址： <a href="https://chrome.google.com/webstore/detail/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/pinjkilghdfhnkibhcangnpmcpdpmehk">https://chrome.google.com/webstore/detail/微博图床/pinjkilghdfhnkibhcangnpmcpdpmehk</a><br>Github: <a href="https://github.com/Semibold/Weibo-Picture-Store">https://github.com/Semibold/Weibo-Picture-Store</a></p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>支持點選、拖拽、粘貼以及頁面右鍵菜單上傳圖片到微博並同步到微相冊</li><li>支持拖拽上傳文件夾中的圖片文件</li><li>支持 JPEG、PNG、GIF 三種圖片格式</li><li>支持 SVG、BMP、WebP、ico 有損轉換為 PNG</li><li>支持把 HTML5 視頻的當前幀上傳為 JPG 圖像</li><li>支持查看上傳記錄，簡單的瀏覽及刪除操作</li><li>支持生成 URL、HTML、UBB、Markdown 四種格式</li><li>支持單條、多條模式的複製操作</li><li>支持選擇協議（http、https 和相對協議）</li><li>支持三種固定裁剪尺寸和用户自定義尺寸</li><li>支持使用微博賬號和密碼自動登錄</li></ul><h2 id="界面介紹"><a href="#界面介紹" class="headerlink" title="界面介紹"></a>界面介紹</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Main_interface.png" alt="主界面"></p><ol><li>地址協議選擇</li><li>圖片裁剪選擇</li><li>在單條和多條複製模式之間切換的按鈕</li><li>上傳記錄按鈕</li><li>選擇上傳圖片的按鈕</li><li>複製當前類型的地址，批量模式下會複製此類型的所有地址</li><li>粘貼區域及拖拽區域，彈窗任何區域都可以使用（這裏可以批量粘貼圖片鏈接）</li><li>隱藏菜單，用於放置反饋及其他信息（圖中是菜單展開狀態）</li><li>在 GitHub 上提交建議或者 BUG</li><li>通過電子郵件反饋問題（如果不方便使用 GitHub）</li><li>捐贈支持一下</li><li>查看更新日誌</li></ol><h3 id="上傳記錄界面"><a href="#上傳記錄界面" class="headerlink" title="上傳記錄界面"></a>上傳記錄界面</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Upload_record_interface.png" alt="上傳記錄界面"></p><ol><li>從微相冊中移除這張圖片</li><li>在圖片上右擊可以複製圖片地址</li><li>批量刪除選中的文件（按住 Ctrl 鍵可以多選）</li><li>圖片最近的修改時間</li><li>切換相冊（不可用狀態）</li><li>切換相冊（可用狀態）</li></ol><h2 id="上傳方式"><a href="#上傳方式" class="headerlink" title="上傳方式"></a>上傳方式</h2><p>支持單張上傳和多張上傳</p><h3 id="點擊上傳"><a href="#點擊上傳" class="headerlink" title="點擊上傳"></a>點擊上傳</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Upload_method.jpg" alt="上傳方式"></p><h3 id="拖拽上傳"><a href="#拖拽上傳" class="headerlink" title="拖拽上傳"></a>拖拽上傳</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Drag_and_drop_file_upload.gif" alt="拖拽上傳"></p><h3 id="瀏覽器右鍵上傳"><a href="#瀏覽器右鍵上傳" class="headerlink" title="瀏覽器右鍵上傳"></a>瀏覽器右鍵上傳</h3><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Browser_right_click_upload.jpg" alt="瀏覽器右鍵上傳"></p><h2 id="存儲位置"><a href="#存儲位置" class="headerlink" title="存儲位置"></a>存儲位置</h2><p>因為上傳的時候會讀取cookies,所以你要提前登錄新浪微博。當然你也可以在擴展中填寫微博賬號和密碼(不推薦)。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/Set_Weibo_account_and_password.jpg" alt="設置微博賬號和密碼"></p><p>上傳後的圖片會存儲在新浪微博-我的相冊裏</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Weibo-Picture-Store/storage_location.jpg" alt="存儲位置"></p><h2 id="其他資訊"><a href="#其他資訊" class="headerlink" title="其他資訊"></a>其他資訊</h2><ul><li><p>圖片上傳到哪兒了？<br>上傳到用户的微博上了</p></li><li><p>在擴展中填寫微博賬號和密碼，這樣做是否安全？<br>你填寫的賬號和密碼存在本地，不會上傳到任何服務器上</p></li><li><p>我的常用微博賬號是A，我可以在擴展中填寫另一個賬號B嗎？<br>可以但不推薦，因為一個瀏覽器同時只能有一個微博的登錄狀態，在使用B時，A可能會被強制登出。若有同時登錄兩個賬户的需求，請使用 Chrome 的多用户模式來避免上述這種情況</p></li><li><p>可以上傳的最大圖片大小是多少？<br>目前是 20MB</p></li><li><p>如何設置微博圖片水印？<br>請參考官方教程設置微博圖片水印</p></li><li><p>如何管理已上傳的圖片？<br>上傳記錄或者微相冊均可以管理</p></li><li><p>如何刪除已上傳的圖片？<br>目前無法刪除，微相冊中的刪除是針對相冊的操作，對圖片本身沒有影響</p></li><li><p>粘貼上傳沒有效果？<br>粘貼上傳只支持複製圖片文件，在資源文件管理器中的複製文件並粘貼是沒有效果的</p></li><li><p>上傳的是 PNG 圖片，返回的卻是 JPG 後綴的地址？<br>微博不支持 PNG 後綴，後綴對於瀏覽器判斷圖片的格式是沒有影響的</p></li><li><p>如何使用自定義裁剪？<br>自定義裁剪的格式需要微博支持，否則生成的地址是不能訪問的</p></li><li><p>裁剪操作對圖片的影響？<br>裁剪適用於 JPEG 格式的圖片。PNG 圖片裁剪後會丟失透明通道，GIF 則會變成靜態圖片</p></li><li><p>微相冊同步圖片的最大數量是多少？<br>1000 張。如果達到這個數量後繼續使用，會創建新的相冊，如果相冊也滿了，則不再同步圖片</p></li><li><p>微相冊數量已達到上限 100 個，不能同步圖片了怎麼辦？<br>前往微相冊清理陳舊的相冊即可</p></li><li><p>為什麼通過複製粘貼的方式上傳 GIF 會變成靜態圖片？<br>在瀏覽器或操作系統中複製 GIF 時，只有其中一幀被複制到了剪切板，因此上傳後會變成靜態圖片</p></li></ul><h2 id="相關文章"><a href="#相關文章" class="headerlink" title="相關文章"></a>相關文章</h2><p>  Weibo-Picture-Store：<a href="https://github.com/Semibold/Weibo-Picture-Store">https://github.com/Semibold/Weibo-Picture-Store</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 圖床 </tag>
            
            <tag> chrome插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知識點複習(二)</title>
      <link href="posts/46be9372/"/>
      <url>posts/46be9372/</url>
      
        <content type="html"><![CDATA[<h2 id="面向對象程序設計-OOP"><a href="#面向對象程序設計-OOP" class="headerlink" title="面向對象程序設計(OOP)"></a>面向對象程序設計(OOP)</h2><p>面向對象的程序由對象組成的，每個對象包含對用户公開的特定功能部分和隱藏的實現部分。<br>oop將數據擺在第一位，然後考慮操作數據的算法。</p><h3 id="對象"><a href="#對象" class="headerlink" title="對象"></a>對象</h3><p>要使用OOP，要瞭解對象的三個主要特性：</p><ul><li>對象的行為(behavior) ———— 可以對對象施加哪些操作，或可以對對象施加哪些方法？</li><li>對象的狀態(state) ———— 當施加那些方法時，對象如何響應？</li><li>對象標識(identity) ———— 如何辨別具有相同行為與狀態的不同對象？</li></ul><h3 id="類之間的關係"><a href="#類之間的關係" class="headerlink" title="類之間的關係"></a>類之間的關係</h3><ul><li><p>依賴(“uses-a”)<br>如果一個類的方法操作另一個類的對象，我們就説一個類依賴另一個類</p></li><li><p>聚合(“has-a”)<br>聚合意味著類A的對象包含類B的對象</p></li><li><p>繼承(“is-a”)<br>類A擴展類B,類A不但包含從類B繼承的方法，還會擁有一些額外的功能</p></li></ul><h2 id="使用預定義類"><a href="#使用預定義類" class="headerlink" title="使用預定義類"></a>使用預定義類</h2><h3 id="對象與對象變量"><a href="#對象與對象變量" class="headerlink" title="對象與對象變量"></a>對象與對象變量</h3><p>要想使用對象，就必須首先構造對象，並指定其初始狀態。然後，對對象應用方法。<br><code>構造器(constructor)</code>用來構造新實例。構造器是一種特殊的方法，用來構造並初始化對象。</p><p>構造器的名字應與類名相同。<br>以Date類為例，Date類的構造器名為Date。構造一個Date對象，需要在構造器前面加上new操作符。<br><code>new Date()</code><br>這個表達式構造一個新對象，這個對象被初始化啊為當前的日期和時間。<br>為了讓構造的對象能多次使用，將對象存放在一個變量<br><code>Date birthday = new Date()</code></p><p>下圖顯示了引用新構造的對象變量birthday</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Java_review_2/Java_review_2_Create_a_new_object.jpg" alt="創建一個新對象"></p><p>在對象與對象變量之間存在一個重要的區別。例如<br><strong>Date deadline</strong>  //deadline doesn’t refer to any object<br>定義了一個對象變量deadline，它可以引用Date類型的對象。<br>但是，變量deadline不是一個對象，實際上也沒有引用對象。</p><p>必須初始化變量deadline,有兩個選擇。一是用新構造的對象初始化這個變量<br><code>deadline = new Date()</code><br>二是讓這個變量引用一個<strong>已存在</strong>的對象：<br><code>deadline = birthday</code><br>現在兩個變量引用同一個對象</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Java_review_2/Java_review_2_references_the_same_object.jpg" alt="引用同一個對象的對象變量"></p><p><strong>一個對象變量並沒有實際包含一個對象，而僅僅引用一個對象。</strong><br><strong>在Java中，任何對象變量的值都是對存儲在另外一個地方的一個對象的引用</strong></p><p><code>Date deadline = new Date()</code><br>表達式new Date()構造了一個Date類型的對象，並且它的值是對新創建對象的引用。這個引用存儲在變量deadline中。</p><p>可以將對象變量設為null,表明這個對象變量目前沒有引用任何對象。<br><code>deadline = null;</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知識點複習(一)</title>
      <link href="posts/58a40d07/"/>
      <url>posts/58a40d07/</url>
      
        <content type="html"><![CDATA[<p>學習Java的一些筆記</p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ol><li>Java對大小寫很敏感</li><li>類名必須以字母開頭，後面可以跟字母和數字,也可以用 _和$ 兩種符號。不能使用Java保留字。（標準類名：以大寫字母開頭，如果類名由多個單詞組成，每個單詞首字母應該要大寫</li><li>源代碼文件名必須與公共類的名字相同</li><li>為了代碼能夠執行，必須包含一個main方法</li></ol><h2 id="Java中的三種註釋"><a href="#Java中的三種註釋" class="headerlink" title="Java中的三種註釋"></a>Java中的三種註釋</h2><ol><li>單行註釋( // )</li><li>多行註釋( /*  */)</li><li>多行註釋 可以自動生成文檔( /**  */)</li></ol><h2 id="數據類型"><a href="#數據類型" class="headerlink" title="數據類型"></a>數據類型</h2><table><thead><tr><th>類型</th><th></th><th>儲存需求</th><th>取值範圍</th></tr></thead><tbody><tr><td>boolean</td><td></td><td>1字節 (8 bit)</td><td>true, false</td></tr><tr><td>char</td><td></td><td>2字節(16 bit)</td><td>0 ~ 216-1</td></tr><tr><td>byte</td><td>整型</td><td>1字節 (8 bit)</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>整型</td><td>2字節 (16 bit)</td><td>-32 768 ~ 32 767 <br>(-215 ~ 215-1)</td></tr><tr><td>int</td><td>整型</td><td>4字節 (32 bit)</td><td>-2 147 483 648 ~ 2 147 483 647<br>(-231 ~ 231-1)</td></tr><tr><td>long</td><td>整型</td><td>8字節 (64 bit)</td><td>-9 223 372 036 854 776 808 ~ 9 223 372 036 854 775 807 <br>(-263 ~ 263-1)</td></tr><tr><td>float</td><td>浮點類型</td><td>4字節 (32 bit)</td><td>大約±3.402 823 47E + 38F(有效位數為6~7位)</td></tr><tr><td>double</td><td>浮點類型</td><td>8字節 (64 bit)</td><td>大約±1.797 693 134 862 315 70E + 308(有效位數為15位)</td></tr></tbody></table><ol><li>長整數型有一個後綴L (如4000000000L)</li><li>十六進制數值有一個後綴0x (如0xCAFE)</li><li>八進制有一個前綴 0 (如010)</li><li>二進制有一個前綴 0b (如0b1001)</li><li>Float類型的數值有一個後綴F (如 3.14F)</li></ol><h2 id="final-關鍵字"><a href="#final-關鍵字" class="headerlink" title="final 關鍵字"></a>final 關鍵字</h2><p>final關鍵字表示變量只能被賦值一次，一旦被賦值後，就不能被更改。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Final <span class="keyword">double</span> CMCC = <span class="number">2.54</span></span><br></pre></td></tr></table></figure><p>如果希望某個常量可以在一個類中的多個方法中使用，稱這個常量為類常量。可以使用關鍵字static final 設置一個類常量，定義的位置在main方法外部。因此，同一個類的其他方法中也可以使用這個常量。如果一個常量被聲明為public，那麼其他類的方法也可以使用這個常量。</p><h2 id="運算符"><a href="#運算符" class="headerlink" title="運算符"></a>運算符</h2><p>在java中，算術運算符可以用+ - * / 來代表加減乘除。<br>當參與除(/)運算的兩個操作數為整數時，表示整數除法，答案為整數。否則，表示浮點除法。<br>求餘數可以用%<br>例如 10%3等於1，10%3.0等於1.0</p><p>注意：整數除以0將會產生一個異常，而浮點數除以0將會得到無窮大或NaN結果。</p><h2 id="i-和-i-的-區別"><a href="#i-和-i-的-區別" class="headerlink" title="i++ 和 ++i 的 區別"></a>i++ 和 ++i 的 區別</h2><ol><li>如果只是看i++和++i，這兩個是等價的，都等同於i=i+1，都是變量自身加1。</li><li>在一般情況下，它們都是跟賦值聯繫在一起。<br>比如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a=i++; <span class="comment">//將i的值賦值給a，即a=i；然後再執行i=i+1；</span></span><br><span class="line">也就是【a=i++;】與【a=i; i=i+<span class="number">1</span>;】等價。</span><br><span class="line">a=++i;<span class="comment">//將i+1的值賦給a,即a=i+1;然後再執行i=i+1；</span></span><br><span class="line">也就是【a=++i;】與【a=i+<span class="number">1</span>;i=i+<span class="number">1</span>;】等價。</span><br></pre></td></tr></table></figure><p>總結一下</p><ul><li>前置++是將自身加1的值賦值給新變量，同時自身也加1；</li><li>後置++是將自身的值賦給新變量，然後才自身加1.</li></ul><h2 id="關係運算符"><a href="#關係運算符" class="headerlink" title="關係運算符"></a>關係運算符</h2><p><strong>三元操作符</strong><br><code>Condition? expression1: expression2</code><br>當Condition為true時，計算或返回第一個表達式expression1，如果為false,則計算第二個表達式expression2.<br>如 x &lt;y ? x: y<br>返回x和y中較小的那個值。</p><h2 id="數值類型之間的轉換"><a href="#數值類型之間的轉換" class="headerlink" title="數值類型之間的轉換"></a>數值類型之間的轉換</h2><p>整型、實型（常量）、字符型數據可以混合運算。運算中，不同類型的數據先轉化為同一類型，然後進行運算。轉換過程中可能導致溢出或損失精度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低----------------------------------------------------------高</span><br><span class="line"><span class="keyword">byte</span>, <span class="keyword">short</span>, <span class="keyword">char</span>—&gt; <span class="keyword">int</span> —&gt; <span class="keyword">long</span>—&gt; <span class="keyword">float</span> —&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><h3 id="自動類型轉換"><a href="#自動類型轉換" class="headerlink" title="自動類型轉換"></a>自動類型轉換</h3><p>必須滿足轉換前的數據類型的位數要低於轉換後的數據類型。<br>自動轉換由低到高的順序轉換</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">123456789</span>;</span><br><span class="line"><span class="keyword">float</span> f = n;<span class="comment">//f值為1.234567892E8</span></span><br></pre></td></tr></table></figure><p>當使用上面兩個數值進行二元操作時（例如 n+f  , n是整數，f是浮點數），先要將兩個操作數轉換為同一種類型，然後再進行計算。</p><ul><li><p>如果兩個操作數中有一個是double類型，另一個操作數就會轉換為double類型；</p></li><li><p>否則，如果其中一個操作數是float類型，另一個操作數將會轉換為float類型；</p></li><li><p>否則，如果其中一個操作數是long類型，另一個操作數將會轉換為long類型。</p></li><li><p>否則，兩個操作數都將被轉換為int類型。</p></li></ul><h3 id="強制類型轉換"><a href="#強制類型轉換" class="headerlink" title="強制類型轉換"></a>強制類型轉換</h3><p>高的向低的順序轉換</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.94</span>;</span><br><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) x;</span><br></pre></td></tr></table></figure><p>x的結果為3，強制類型轉換通過截斷小數部分將浮點值轉為整型。<br>如果想要四捨五入，得到最接近的整數。可以使用Math.round方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> y = (<span class="keyword">int</span>) Math.round(x);</span><br></pre></td></tr></table></figure><p>結果為 4，當調用round時，仍然需要使用強制類型轉換(int).其原理是因為round方法返回的結果為long類型。由於存在信息丟失的可能性，所以只有使用顯式的強制類型轉換才能夠將long類型轉換成int類型。</p><p>不要在boolean類型與任何類型之間進行強制類型轉換，這樣可以防止發生錯誤。</p><h2 id="運算符優先級"><a href="#運算符優先級" class="headerlink" title="運算符優先級"></a>運算符優先級</h2><p>| 優先級 | 運算符                                                               | 簡介                                                       | 結合性   |<br>| —— | ——————————————————————– | ———————————————————- | ——– | ——– |<br>| 1      | [ ]、 .、 ( )                                                        | 方法調用，屬性獲取 | 從左向右 |<br>| 2      | !、~、 ++、 –                                                       | 一元運算符                                                 | 從右向左 |<br>| 3      | * 、/ 、%                                                            | 乘、除、取模（餘數）                                       | 從左向右 |<br>| 4      | + 、 -                                                               | 加減法                                                     | 從左向右 |<br>| 5      | &lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;                                                        | 左位移、右位移、無符號右移                                 | 從左向右 |<br>| 6      | &lt; 、&lt;= 、&gt;、 &gt;=、 instanceof                                         | 小於、小於等於、大於、大於等於，對象類型判斷是否屬於同類型 | 從左向右 |<br>| 7      | == 、!=                                                              | 2個值是否相等，2個值是否不等於。 下面有詳細的解釋          | 從左向右 |<br>| 8      | &amp;                                                                    | 按位與                                                     | 從左向右 |<br>| 9      | ^                                                                    | 按位異或                                                   | 從左向右 |<br>| 10     | &#124;                                                               | 按位或                                                     | 從左向右 |<br>| 11     | &amp;&amp;                                                                   | 短路與                                                     | 從左向右 |<br>| 12     | &#124;&#124;                                                         | 短路或                                                     | 從左向右 |<br>| 13     | ?:                                                                   | 條件運算符                                                 | 從右向左 |<br>| 14     | =、 += 、-= 、*= 、/=、 %=、 &amp;=、 &#124;=、 ^=、 &lt;、&lt;= 、&gt;、&gt;= 、&gt;&gt;= | 混合賦值運算符                                             | 從右向左 |</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="子串substring"><a href="#子串substring" class="headerlink" title="子串substring"></a>子串substring</h3><p>String類的substring方法可以從一個較大的字符串提取出一個子串。</p><p><code>substring(a,b)</code></p><ul><li>a 表示開始的位置（從0開始計數）</li><li>b表示不想複製的第一個位置</li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String s = greeting.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// s = hel</span></span><br><span class="line"><span class="comment">//從0開始計數，直到3位置，但是不包括3，所以返回 hel</span></span><br></pre></td></tr></table></figure><p>substring的一個優點：容易計算子串的長度，長度為b-a。<br>例如 hel的長度為 3-0=3</p><h3 id="檢測字符串是否相等"><a href="#檢測字符串是否相等" class="headerlink" title="檢測字符串是否相等"></a>檢測字符串是否相等</h3><p>可以使用equals來檢測兩個字符串是否相等。<br><code>s.equals(t)</code><br>如果相等，會返回true,否則，返回false. s和t可以是字符串變量，也可以是字符串常量。<br>eg: “hello”.equals(greeting)</p><p>檢測是否相等，而且不區分大小寫，可以使用equalsIgnoreCase方法。<br>eg: “hello”.equalsIgnoreCase(“HeLLO)</p><p>不能使用==運算符來檢測兩個字符串是否相同，這個運算符只能夠確定兩個字符串是否放置在同一個位置。</p><h3 id="空串和Null串"><a href="#空串和Null串" class="headerlink" title="空串和Null串"></a>空串和Null串</h3><p>空串是一個Java對象，有自己的串長度(0)和內容(空)。可以通過調用以下代碼檢查字符串是否為空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str.length()==<span class="number">0</span>)</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><p><code>null</code>表示目前沒有任何對象與該變量關聯。可以通過調用以下代碼檢查字符串是否為null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">要檢測一個字符串既不是<span class="keyword">null</span>也不是空串：</span><br><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length()!=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="length-與-charAt"><a href="#length-與-charAt" class="headerlink" title="length() 與 charAt()"></a>length() 與 charAt()</h3><p>length方法會返回採用UTF-16編碼表示的給定字符串所需的代碼單元數量。<br>想要得到實際的長度，即代碼點數量，可以調用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.codePointCount(<span class="number">0</span>,xxx.length())</span><br></pre></td></tr></table></figure><p>調用s.chatAt(n)將返回位置n的代碼單元，n介於0~ s.length()-1 之間。<br>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">char</span> first = greeting.charAt(<span class="number">0</span>);    <span class="comment">// first is H</span></span><br><span class="line"><span class="keyword">char</span> last = greeting.charAt(<span class="number">4</span>);  <span class="comment">// last is o</span></span><br></pre></td></tr></table></figure><p>想得到i個的代碼點，可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index= greeting.offsetByCodePoints(<span class="number">0</span>,i);</span><br><span class="line"><span class="keyword">int</span> cp = greeting.codePonintAt(index);</span><br></pre></td></tr></table></figure><h2 id="輸入輸出"><a href="#輸入輸出" class="headerlink" title="輸入輸出"></a>輸入輸出</h2><h3 id="讀取輸入"><a href="#讀取輸入" class="headerlink" title="讀取輸入"></a>讀取輸入</h3><p>為了能夠讀取用户在控制枱的輸入，首先需要創建一個Scanner對象，並與“標準輸入流”System.in關聯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner (System.in)</span><br></pre></td></tr></table></figure><ul><li>next()<br>  讀取到輸入有效的字符才會結束輸入，對於輸入有效的字符<strong>之前</strong>的空白會自動去掉，輸入有效的字符<strong>之後</strong>的空白作為分隔符或者結束符。next() 不能得到帶有空格的字符串。</li><li>nextLine()<br>  以enter為結束符，nextLine()可以得到帶有空格的字符串，不會去掉空白，會全盤輸出。</li><li>nextInt()<br>  得到int類型的數據。nextDouble(),nextFloat()以此類推。</li><li>boolean hasNext()<br>檢測輸入中是否有還有其他單詞。</li></ul><p>記得要<code>import java.util.*;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input_and_Output</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;what is your name :&quot;</span>);</span><br><span class="line">        String name = in.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;age :&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = in.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;the name is &quot;</span> + name + <span class="string">&quot;,the age is &quot;</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//輸入結果：</span></span><br><span class="line"><span class="comment">//what is your name :jerry</span></span><br><span class="line"><span class="comment">//age :24</span></span><br><span class="line"><span class="comment">//the name is jerry,the age is 24</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="格式化輸出"><a href="#格式化輸出" class="headerlink" title="格式化輸出"></a>格式化輸出</h3><p>System.out.print(X)會將以x對應的數據類型所允許的最大非0數字位數打印輸出x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span>/<span class="number">3.0</span>;</span><br><span class="line">System.out.print(x);  <span class="comment">// x = 3333.3333333333335</span></span><br></pre></td></tr></table></figure><p>為了能夠方便格式輸出結果，可以使用printf()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span>/<span class="number">3.0</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;8.2f&quot;</span>,x);</span><br><span class="line"><span class="comment">// x = 3333.33 使用8個字符的寬度和小數點後兩位字符的精度打印x</span></span><br><span class="line"><span class="comment">// 因為小數點後2位，為3333.33。但是指定要8個字符的寬度，所以左邊會補一個空格</span></span><br><span class="line"><span class="comment">// x結果為（1個空格）3333.33</span></span><br></pre></td></tr></table></figure><p>用於printf的轉換符</p><table><thead><tr><th>轉換符</th><th>類型</th><th>舉例</th></tr></thead><tbody><tr><td>%s</td><td>字符串類型</td><td>“Hello”</td></tr><tr><td>%c</td><td>字符類型</td><td>‘H’</td></tr><tr><td>%b</td><td>布爾類型</td><td>true OR false</td></tr><tr><td>%d</td><td>整數類型（十進制）</td><td>10</td></tr><tr><td>%x</td><td>整數類型（十六進制）</td><td>9f</td></tr><tr><td>%o</td><td>整數類型（八進制）</td><td>237</td></tr><tr><td>%f</td><td>浮點類型</td><td>15.9</td></tr><tr><td>%a</td><td>十六進制浮點類型</td><td>0x1.fccdp3</td></tr><tr><td>%e</td><td>指數類型</td><td>6.23e+24</td></tr><tr><td>%g</td><td>通用浮點類型（f和e類型中較短的）</td><td>42.5000</td></tr><tr><td>%h</td><td>散列碼</td><td>42628b2</td></tr><tr><td>%%</td><td>百分比類型</td><td>％</td></tr><tr><td>%n</td><td>換行符</td><td>相當於”\n”換行作用</td></tr><tr><td>%tx</td><td>日期與時間類型（x代表不同的日期與時間轉換符）</td><td>見博文下表</td></tr></tbody></table><h3 id="大數值"><a href="#大數值" class="headerlink" title="大數值"></a>大數值</h3><p>如果基本的整數和浮點數精度不夠滿足需求，那麼可以使用java.math包中的兩個很有用的類：<strong>BigInteger</strong>和<strong>BigDecimal</strong>。這兩個類可以處理包含任意長度數字序列的數值。</p><ul><li>BigInteger 實現任意精度的整數運算</li><li>BigDecimal 實現任意精度的浮點數運算</li></ul><p>把普通的數值轉換成大數值，可以使用靜態的valueOf()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a = BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>大數值的運算不能使用常用的算術運算符（如+，*）處理，而是要使用大數值類中的<code>add</code>和<code>multiply</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger c = a.add(b); <span class="comment">// c=a+b</span></span><br><span class="line">BigInteger d = c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>))); <span class="comment">// d = c*(b+2)</span></span><br></pre></td></tr></table></figure><p>其他的運算包括有 <code>subtract(減)</code>，<code>divide(除)</code>和<code>mod(餘數)</code></p><h2 id="數組"><a href="#數組" class="headerlink" title="數組"></a>數組</h2><h3 id="數組聲明"><a href="#數組聲明" class="headerlink" title="數組聲明"></a>數組聲明</h3><p>數組是一種數據結構，用來存儲同一類型值的集合</p><p>數組聲明方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array 或者<span class="keyword">int</span> array[]</span><br></pre></td></tr></table></figure><p>數組初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span>[] arry = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>創建一個數字數組時，所有的元素都初始化為0。<br>boolean數組的元素會初始化為false<br>對象數組的元素會初始化為一個特殊值null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span>[] test = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;test.length;i++) &#123;</span><br><span class="line">  System.out.println(test[i]);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出的結果會是： 0 0 0 0 0</p><p><strong>重要：</strong><br>一旦創據數組，就不能再改變數組的大小。如果需要在運行中擴展數組的大小，則需要使用另一種數據結構——數組列表（array list)</p><h3 id="for-each循環"><a href="#for-each循環" class="headerlink" title="for each循環"></a>for each循環</h3><p>Java有一種很強的循環結構，可以用來依次處理數組中的每個元素而不必為指定下標值而分心。</p><p>格式：<br><code>for(variable:collection) statement</code><br>定義一個變量用於暫存集合中的每一個元素，並執行相應的語句。<br>collection這一集合表達式必須必須是一個數組或者是一個實現了Iterable接口的類對象（例如Arraylist)。<br>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element ：a)</span><br><span class="line">  System.out.println(element)  </span><br><span class="line">  <span class="comment">//打印數組a的每一個元素，一個元素佔一行</span></span><br><span class="line">  <span class="comment">// for each element in a</span></span><br></pre></td></tr></table></figure><h3 id="數組拷貝"><a href="#數組拷貝" class="headerlink" title="數組拷貝"></a>數組拷貝</h3><p>在java中，允許將一個數組變量拷貝到給另一個數組變量。這時，兩個變量將引用同一個數組</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] b = a;</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">12</span> <span class="comment">// b[2] = 12</span></span><br></pre></td></tr></table></figure><p>如果想將一個數組的所有值拷貝到一個新的數組去，使用Arrays類的copyTo方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copieda = Arrays.copyTo(a,a.length);</span><br></pre></td></tr></table></figure><p>第二個參數是新數組的長度，可以通過這個方法來增加數組的大小。<br>eg: <code>Arrays.copyTo(a,2*a.length);</code> 增加到2倍大<br>如果數組元素是數字數組時，多餘的元素都賦值為0。<br>如果數組元素是boolean數組，多餘的元素會賦值為false<br>如果數組元素是對象數組的元素，多餘的元素賦值為特殊值null<br>如果長度小於原始數組的長度，則只拷貝前面的數據元素</p><h3 id="數組排序"><a href="#數組排序" class="headerlink" title="數組排序"></a>數組排序</h3><p>想要對數組排序，可以使用Arrays類的sort方法<code>Arrays.sort(數組a)</code></p><p>抽獎遊戲</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryDrawing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//抽獎遊戲，設置總數n和抽取的數k,隨機抽取</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;how many numbers do you need to draw?&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> k = in.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;what is the highest number you can draw?&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 給 總數賦值</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; numbers.length;i++) &#123;</span><br><span class="line">          numbers[i]= i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;result.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">int</span> r = (<span class="keyword">int</span>)(Math.random()*n); <span class="comment">//隨機抽取</span></span><br><span class="line">          result[i] = numbers[r];    <span class="comment">//把抽取的值賦給result</span></span><br><span class="line"></span><br><span class="line">          numbers[r]=numbers[n-<span class="number">1</span>]; <span class="comment">//避免抽到相同的數，把最尾的值賦給被抽到的值</span></span><br><span class="line">          n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(result); <span class="comment">//排序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bet the foolowing combination. It&#x27;ll make you rich!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r:result)</span><br><span class="line">          System.out.println(r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多維數組（矩陣）"><a href="#多維數組（矩陣）" class="headerlink" title="多維數組（矩陣）"></a>多維數組（矩陣）</h3><p>多維數組適用於表示表格或者更加複雜的排列方式。</p><h4 id="聲明和初始化"><a href="#聲明和初始化" class="headerlink" title="聲明和初始化"></a>聲明和初始化</h4><p>聲明：<code>type arrayName[][]</code>或者<code>type[][] arrayName</code><br>初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- balance=<span class="keyword">new</span> <span class="keyword">double</span>[rownumber][columnNumber]</span><br><span class="line">- <span class="keyword">int</span>[][] abc = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>Java語言中，由於把二維數組看作是數組的數組，數組空間不是連續分配的，所以不要求二維數組每一維的大小相同。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code 插件推薦-VSC Netease Music</title>
      <link href="posts/86e73295/"/>
      <url>posts/86e73295/</url>
      
        <content type="html"><![CDATA[<p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/1.png"></p><p>最近在微博上看到有一位科技博主推薦了一款Visual Studio Code插件,名字叫做 VSC Netease Music。<br>Visual Studio Code的插件真是越來越多樣化，看漫畫、看小説，現在連聼音樂也都有了。<br>這款插件對我來説最吸引的，應該就是無地區版權限制了。畢竟因為版權原因，網易雲音樂早就把我拒之門外了。</p><h2 id="插件簡介"><a href="#插件簡介" class="headerlink" title="插件簡介"></a>插件簡介</h2><p>插件是一位叫做<a href="https://github.com/nondanee">nondanee</a>的第三方開發者開發的。</p><blockquote><p>插件github地址: <a href="https://github.com/nondanee/vsc-netease-music">https://github.com/nondanee/vsc-netease-music</a><br>插件marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music">https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music</a></p></blockquote><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/2.gif"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><ul><li>發現音樂 (歌單 / 新歌 / 排行榜)</li><li>搜索 (單曲 / 歌手 / 專輯 / 歌單)</li><li>用户登錄 (手機號 / 郵箱)</li><li>用户收藏 (歌單 / 歌手 / 專輯)</li><li>每日歌曲推薦 / 推薦歌單 / 私人 FM</li><li>喜歡音樂 / 收藏音樂</li><li>播放模式切換 / 音量調節</li><li>逐行歌詞</li><li>熱門評論</li><li>快捷鍵支持</li><li>聽歌記錄 (不確定有效)</li><li>無海外限制</li></ul><h2 id="插件需求"><a href="#插件需求" class="headerlink" title="插件需求"></a>插件需求</h2><p>我在電腦上可以正常地使用<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/3.png"><br>但是Github上看到可能需要替換一些文件才可以正常使用。</p><p><strong>Github原文:</strong></p><p>VS Code for Windows 自 1.31.0 起自帶完整的 ffmpeg 動態鏈接庫 (可能是 bug)，無需替換；macOS 與 Linux 平台仍需替換。</p><p>VS Code 使用的 Electron 版本不包含 ffmpeg，需替換自帶的 ffmpeg 動態鏈接庫才能正常播放 (每次更新 VS Code 都需重新替換)</p><h3 id="手動替換"><a href="#手動替換" class="headerlink" title="手動替換"></a>手動替換</h3><p>通過 VS Code 版本在 <a href="https://raw.githubusercontent.com/Microsoft/vscode/%version%/.yarnrc">https://raw.githubusercontent.com/Microsoft/vscode/%version%/.yarnrc</a> 查看其使用的 Electron 版本，並於 <a href="https://github.com/electron/electron/releases/tag/%version%">https://github.com/electron/electron/releases/tag/%version%</a> 下載對應的 Electron 完整版本進行替換</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下載 electron-%version%-win32-%arch%.zip</span><br><span class="line">替換 ./ffmpeg.dll</span><br></pre></td></tr></table></figure><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下載 electron-%version%-darwin-x64.zip</span><br><span class="line">替換 ./Electron.app/Contents/Frameworks/Electron\ Framework.framework/Libraries/libffmpeg.dylib</span><br></pre></td></tr></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下載 electron-%version%-linux-%arch%.zip</span><br><span class="line">替換 ./libffmpeg.so</span><br></pre></td></tr></table></figure><h3 id="自動替換"><a href="#自動替換" class="headerlink" title="自動替換"></a>自動替換</h3><p>使用 Python 腳本替換 (Python 2/3 均可，絕大部分發行版自帶環境)</p><p>默認安裝位置下 Linux 和 Windows 需要以管理員身份運行，macOS 不需要</p><h4 id="Windows-Powershell"><a href="#Windows-Powershell" class="headerlink" title="Windows Powershell"></a>Windows Powershell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-RestMethod https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python</span><br></pre></td></tr></table></figure><h4 id="Unix-Shell"><a href="#Unix-Shell" class="headerlink" title="Unix Shell"></a>Unix Shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python</span><br></pre></td></tr></table></figure><p>如果 VS Code 使用默認配置安裝，腳本會自動尋找並替換，若自定義了安裝位置，請自行修改 installation</p><h2 id="插件用法"><a href="#插件用法" class="headerlink" title="插件用法"></a>插件用法</h2><p>按<strong>F1</strong>或者<strong>Ctrl Shift P</strong>打開命令面板</p><p>輸入命令前綴 <code>網易雲音樂</code> 或 <code>NeteaseMusic</code>就可以使用。<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/4.png"><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/5.png"><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/6.png"></p><p>界面底部還會顯示歌詞和操作欄<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/VSC_Netease_Music/7.png"></p><p>一邊編程，一邊聽歌，是一種很享受的行為，不用另外開多一個音樂軟件。<br>不過涉及到音樂版權問題，這款插件感覺命不久矣。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重裝系統後重新部署恢復 Hexo blog</title>
      <link href="posts/dda8c81b/"/>
      <url>posts/dda8c81b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下方法只適用於沒有刪除 hexo blog 文件夾</p></blockquote><p>因為重裝系統後，Hexo 相關依賴插件/軟件和在 C 盤的緩存資料都會被刪除，以至於 Hexo 的相關命令都無法運行。所有，在重裝系統後，都要重新部署 Hexo。但是重新部署並不難，只需要幾個步驟就行。<br>因為我的 hexo blog 文件夾不存儲於 C 盤，並沒有因為重裝系統被刪掉。所有重新部署很容易。</p><h2 id="安裝-git-和-node"><a href="#安裝-git-和-node" class="headerlink" title="安裝 git 和 node"></a>安裝 git 和 node</h2><p>git for windows: <a href="https://git-scm.com/">https://git-scm.com/</a><br>Node.js: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><h2 id="生成-ssh-密鑰"><a href="#生成-ssh-密鑰" class="headerlink" title="生成 ssh 密鑰"></a>生成 ssh 密鑰</h2><p>配置 git 個人信息和生成 ssh 密鑰<br>打開 git bash，輸入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxxxx@xx.com&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxxxxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure><p>把上面的 xxxx 換成自己的資料，然後一直 Enter 就行。</p><h2 id="設置-Github-的-ssh-密鑰"><a href="#設置-Github-的-ssh-密鑰" class="headerlink" title="設置 Github 的 ssh 密鑰"></a>設置 Github 的 ssh 密鑰</h2><p>當上面的運行完成後，會在 <code>C:\Users\主用户</code>裏出現<code>.ssh</code>文件夾，裏面有 id_rsa 和 id_rsa.pub 兩個文件，複製 id_rsa.pub 的內容。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/1.png"></p><p>打開 Github 網頁，依次是 <code>右上角Settings - SSH and GPG keys - New SSH key</code> 把複製的內容粘貼到 <code>Key</code>欄，然後保存。<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/2.png"><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/3.png"></p><p>PS：如果你有把 blog 同步到 coding 的，記得同樣把 id_rsa.pub 的內容複製到 coding 的 ssh 公鑰去，具體為<code>右上角個人設置 － SSH公鑰 - 新增公鑰</code><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Rebuild_hexo_when_reinstall_the_system/4.png"></p><h2 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h2><p>git bash 上 輸入 <code>npm install hexo-cli -g</code></p><h2 id="刪掉原-blog-文件夾部分文件"><a href="#刪掉原-blog-文件夾部分文件" class="headerlink" title="刪掉原 blog 文件夾部分文件"></a>刪掉原 blog 文件夾部分文件</h2><p>打開你原有的 blog 文件夾，只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 這些項目，刪除其他的文件。</p><h2 id="安裝依賴文件"><a href="#安裝依賴文件" class="headerlink" title="安裝依賴文件"></a>安裝依賴文件</h2><p>git bash 上 輸入 <code>npm install</code></p><h2 id="安裝部署插件"><a href="#安裝部署插件" class="headerlink" title="安裝部署插件"></a>安裝部署插件</h2><p>git bash 上 輸入 <code>npm install hexo-deployer-git --save</code></p><p>最後 運行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 看看是否成功。</p><blockquote><p>本文章參考 <a href="https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/">https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主題 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows上Java的環境變量配置</title>
      <link href="posts/aa98736e/"/>
      <url>posts/aa98736e/</url>
      
        <content type="html"><![CDATA[<p>對於開發者來說，Java是電腦上必備安裝的軟件。安裝Java不單單只是安裝jdk就可以，還要配置Java的環境變量。這篇文章主要是介紹如何配置Java的環境變量。</p><blockquote><p>電腦系統： Windows 10 1809<br>Java版本： 1.8.0_181</p></blockquote><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>第一步当然是安装Java文件。Java現在已經發現到Java11了，不一定要安裝最新的版本，可以根據自己的需要安裝對應的版本。<br>本文安裝的 Java SE 8u181<br>下載Java可以到oracle的官網：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h2 id="新建Java-Home變量"><a href="#新建Java-Home變量" class="headerlink" title="新建Java_Home變量"></a>新建Java_Home變量</h2><p>右鍵This PC(即此電腦)，選擇Properties(屬性)選項。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/1.png"></p><p>點擊左邊欄的Advanced sysyem settings(高級系統設置)，點擊下面的Environment Variables(環境變量)</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/2.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/3.png"></p><p>點擊System variable(系統變量)下的New(新建)。</p><blockquote><p>Variable name(變量名) 填爲 Java_Home<br>Variable value(變量值) 爲Java的安裝路徑。例如我的是 C:\Program Files\Java\jdk1.8.0_181<br>然後點擊OK(確定)</p></blockquote><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/4.png"></p><h2 id="編輯-Path變量"><a href="#編輯-Path變量" class="headerlink" title="編輯 Path變量"></a>編輯 Path變量</h2><p>在System variable(系統變量)下找到<code>Path</code>並雙擊。<br>在打開的窗口中點擊右邊的編輯文本。<br>把 <code>%Java_Home%\bin;%Java_Home%\jre\bin;</code> 複製到 Variable value(變量值) 的開頭並保存。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/5.png"></p><h2 id="新建-CLASSPATH"><a href="#新建-CLASSPATH" class="headerlink" title="新建 CLASSPATH"></a>新建 CLASSPATH</h2><p>點擊System variable(系統變量)下的New(新建)。</p><blockquote><p>Variable name(變量名) 填爲 CLASSPATH<br>Variable value(變量值) 填爲  .;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar<br>然後點擊OK(確定)</p></blockquote><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/6.png"></p><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>上面已經把相關的環境變量給配置好了，接下來測試下是否配置正確。<br>打開CMD或者PowerShell</p><p>輸入<code>Java</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/7.png"></p><p>接着輸入 <code>java -version</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/8.png"></p><p>接着輸入 <code>javac</code></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/setting_up_enviromental_variables_in_windows10/9.png"></p><p>如果你的結果跟上面圖片的結果一樣或者相似的話，恭喜你，Java的環境變量配置已經成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adapter</title>
      <link href="posts/d6615de0/"/>
      <url>posts/d6615de0/</url>
      
        <content type="html"><![CDATA[<p>Adapter 只是一個接口，其派生了ListAdapter和SpinnerAdater兩個子接口。<br>ListAdater為AbsListView提供列表項,SpinnerAdater為AbsSpinner提供列表項。<br>以下是Adapter相關類的關係圖</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Adapter/1.png"></p><p>Adapter常用的實現類:</p><ul><li>ArrayAdapter: 通常用於將數組或者List集合的多個值包裝成多個列表項。</li><li>SimpleAdapter: 用於將List集合的多個對象包裝成多個列表項。</li><li>SimpleCursorAdapter: 與SimpleAdapter基本相似,只是用於包裝Cursor提供的數據。</li><li>BaseAdapter: 通常用於被擴展。擴展BaseAdapter可以對各列表項進行最大限度地定製。</li></ul><h2 id="使用ArrayAdapter創建ListView"><a href="#使用ArrayAdapter創建ListView" class="headerlink" title="使用ArrayAdapter創建ListView"></a>使用ArrayAdapter創建ListView</h2><p><strong>修改<code>activity_main.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:divider</span>=<span class="string">&quot;#f00&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dividerHeight</span>=<span class="string">&quot;2px&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:headerDividersEnabled</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:divider</span>=<span class="string">&quot;#0f0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dividerHeight</span>=<span class="string">&quot;2px&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:headerDividersEnabled</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>android:divider:</code> 可以實現分割線,可以用圖片或者顏色<br><code>android:dividerHeight</code> 設置分割線的高度<br><code>android:headerDividersEnabled</code> 是否顯示頭部的分割線，默認是true</p><p><strong>修改MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ListView list1 = (ListView) findViewById(R.id.list1);</span><br><span class="line">        String [] arr1 = &#123;<span class="string">&quot;孫悟空&quot;</span>,<span class="string">&quot;豬八戒&quot;</span>,<span class="string">&quot;牛魔王&quot;</span>&#125;;</span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter1 = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.array_item,arr1);</span><br><span class="line"></span><br><span class="line">        list1.setAdapter(adapter1);</span><br><span class="line">        ListView list2 = (ListView) findViewById(R.id.list2);</span><br><span class="line">        String[] arr2 = &#123; <span class="string">&quot;java&quot;</span>,<span class="string">&quot;hibernate&quot;</span>,<span class="string">&quot;spring&quot;</span>,<span class="string">&quot;android&quot;</span>&#125;;</span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter2 = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.checked_item,arr2);</span><br><span class="line">        list2.setAdapter(adapter2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ArrayAdapter&lt;String&gt; adapter1 = new ArrayAdapter&lt;String&gt;(this,R.layout.array_item,arr1);</code></p><p>ArrayAdapter傳入了三個參數:</p><ul><li><p>Context: 代表了訪問整個Android應用的接口。</p></li><li><p>textViewResourceId: 一個TextView的資源ID,該TextView組件將作為ArrayAdapter的列表項組件。</p></li><li><p>數組或者List: 提供數據。</p></li></ul><p>以上代碼可以看到,該數組或List包含多少個元素，就將會生成多少個列表項，每個列表項都是TextView組件。<br>arr1有三個數據,則會生成一個包含三個列表項的ArrayAdapter,每個列表項的組件外觀由R.layout.array_item佈局文件(該佈局文件只是一個TextView)控制。</p><p><strong>新建array_item.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/TextView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;24dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shadowColor</span>=<span class="string">&quot;#f0f&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shadowDx</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shadowDy</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shadowRadius</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>TextView-shadow 陰影實現方式</p><ul><li><p>android:shadowColor：陰影的顏色</p></li><li><p>android:shadowDx：水平方向上的偏移量</p></li><li><p>android:shadowDy：垂直方向上的偏移量</p></li><li><p>android:shadowRadius：是陰影的的半徑大小,值也大，陰影越大</p></li></ul><p><strong>新建 checked_item.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">CheckedTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/checktextview&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;24dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:checked</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:checkMark</span>=<span class="string">&quot;?android:listChoiceIndicatorMultiple&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>運行結果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Adapter/2.png"></p><h2 id="基於ListActivity實現列表"><a href="#基於ListActivity實現列表" class="headerlink" title="基於ListActivity實現列表"></a>基於ListActivity實現列表</h2><p>如果程序僅僅只是顯示一個列表，那麼可以無需通過設置xml來實現，而是直接讓Activity繼承ListActivity來實現。</p><p><strong>修改MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2Activity</span> <span class="keyword">extends</span> <span class="title">ListActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        String[] atr = &#123;<span class="string">&quot;孫悟空&quot;</span>,<span class="string">&quot;豬八戒&quot;</span>,<span class="string">&quot;牛魔王&quot;</span>&#125;;</span><br><span class="line">        ArrayAdapter &lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_multiple_choice,atr);</span><br><span class="line">        setListAdapter(adapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到,不用使用setContentView()去調用佈局文件。</p><p>運行結果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Adapter/3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
            <tag> Adapter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9Patch 介紹</title>
      <link href="posts/777fb9e9/"/>
      <url>posts/777fb9e9/</url>
      
        <content type="html"><![CDATA[<h1 id="9Patch圖片介紹"><a href="#9Patch圖片介紹" class="headerlink" title="9Patch圖片介紹"></a>9Patch圖片介紹</h1><p>9Patch圖片是一種特殊的png圖片,以.9.png結尾,它在原始的圖片四周各添加一個寬度為1像素的像條,這4條線條決定了該圖片的縮放規則、內容顯示規則。</p><p>在Android Studio 上編輯<code>.9.png</code>,具體是在Android Studio上右鍵點擊你要編輯的照片,選擇<code>Create 9-Patch file</code>就可以進入編輯界面。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png1.png"></p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png2.png"></p><p>這就是9-Patch的編輯界面</p><p>Optional controls include:</p><ul><li>Zoom: Adjust the zoom level of the graphic in the drawing area.</li><li>Patch scale: Adjust the scale of the images in the preview area.</li><li>Show lock: Visualize the non-drawable area of the graphic on mouse-over.</li><li>Show patches: Preview the stretchable patches in the drawing area (pink is a stretchable patch), as shown in figure 2, above.</li><li>Show content: Highlight the content area in the preview images (purple is the area in which content is allowed), as shown in figure 2.</li><li>Show bad patches: Adds a red border around patch areas that may produce artifacts in the graphic when stretched, as shown in figure 2. Visual coherence of your stretched image will be maintained if you eliminate all bad patches.</li></ul><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png3.png"></p><p>這3個從上到下依次是</p><ul><li>縱向拉伸的預覽</li><li>橫線拉伸的預覽</li><li>縱橫向一起拉伸的預覽</li></ul><p>9Patch的規則：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png4.png"><br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9png5.png"></p><ul><li><p>上側和左側的黑色線段共同決定了圖片的縮放區域</p><ul><li>上側的黑色線段為上邊界繪製巨型,它覆蓋的區域可以水平縮放。</li><li>左側的黑色線段為左邊界繪製巨型,它覆蓋的區域可以縱向上縮放。</li><li>它們二者的交集區域可以在兩個方向上縮放</li></ul></li><li><p>下側和右側的黑色線段共同決定了圖片的內容顯示區域</p><ul><li>以下側的黑色線段為下邊界繪製巨型</li><li>以右側的黑色線段為右邊界繪製巨型</li><li>它們二者的交集區域為內容顯示區域</li></ul></li></ul><h1 id="9Patch-相關文章"><a href="#9Patch-相關文章" class="headerlink" title="9Patch 相關文章"></a>9Patch 相關文章</h1><h2 id="Android設計中如何切圖-9-png（點9圖）"><a href="#Android設計中如何切圖-9-png（點9圖）" class="headerlink" title="Android設計中如何切圖.9.png（點9圖）"></a>Android設計中如何切圖.9.png（點9圖）</h2><blockquote><p>轉自: <a href="http://www.miued.com/2074/">http://www.miued.com/2074/</a></p></blockquote><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/1.png"></p><p>在Android的設計過程中,為了適配不同的手機分辨率,圖片大多需要拉伸或者壓縮,這樣就出現了可以任意調整大小的一種圖片格式“.9.png”。這種圖片是用於Android開發的一種特殊的圖片格式,它的好處在於可以用簡單的方式把一張圖片中哪些區域可以拉伸,哪些區域不可以拉伸設定好,同時可以把顯示內容區域的位置標示清楚。<br>本文結合一些具體的例子來看下.9.png的具體用法。</p><p>首先看下普通的.png資源與.9.png的資源區別：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/2.png"></p><p>普通的png資源就不多介紹了,可以明顯看到.9.png的外圍是有一些黑色的線條的,那這些線條是用來做什麼的呢？我們來看下放大的圖像：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/3.png"></p><p>放大後可以比較明顯的看到上下左右分別有一個像素的黑色線段,這裏分別標註了序號。簡單來説,序號1和2標識了可以拉伸的區域,序號3和4標識了內容區域。當設定了按鈕實際應用的寬和高之後,橫向會拉伸1區域的像素,縱向會拉伸2區域的像素。如下圖：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/5.png"></p><p>拉伸的含義應該比較容易理解,但是內容區域的標註有什麼意義呢？我們來看下圖：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/6.png"></p><p>這裏程序設置的文字垂直居中,水平居左的對齊方式。對齊方式是沒有問題的,但是對於這種大圓角同時又有些不規則邊框的的圖形來説,錯誤的標註方式會讓排版看起來很混亂。所以我們需要修正內容區域的線段位置和長度。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/7.png"></p><p>把橫向的內容區域縮短到圓角以內,縱向的內容區域控制在輸入框的高度以內,這樣文字就可以正常顯示了。</p><p>這裏還有一種特殊情況,就是本身是.9.png的資源,但是在修改過程中你希望這張.9.png不能被拉伸（在做皮膚的情況中有可能會遇到）,那怎麼辦呢？只要把拉伸區域的點點在透明像素的地方就可以了,這樣拉伸的時候會拉伸透明部分的像素,而不會拉伸圖像本身。如下圖:</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/8.png"></p><p>大家可以看到拉伸區域的黑點是可以不連續的。</p><p>説了半天.9.png的用法,那.9.png如何輸出呢？有很多種方式可以輸出.9.png,比如説用draw9patch.bat這個工具,或者簡單一點,用photoshop直接輸出。輸出的方式是先輸出普通的png資源,然後擴大畫布大小,上下左右各空出一個像素,再用一個像素的鉛筆工具（顏色選擇純黑色）,上下左右分別畫點就可以了,保存的時候注意把後綴修改為.9.png。<br>有兩點需要特別注意下：<br>1.最外圍的一圈像素必須要麼是純黑色,要麼是透明,一點點的半透明的像素都不可以有,比如説99%的黑色或者是1%的投影都不可以有;<br>2.文件的後綴名必須是.9.png,不能是.png或者是.9.png.png,這樣的命名都會導致編譯失敗。</p><h2 id="A-simple-guide-to-9-patch-for-Android-UI"><a href="#A-simple-guide-to-9-patch-for-Android-UI" class="headerlink" title="A simple guide to 9-patch for Android UI"></a>A simple guide to 9-patch for Android UI</h2><blockquote><p>轉自:<a href="http://radleymarx.com/ux-dev/simple-guide-to-9-patch/">http://radleymarx.com/ux-dev/simple-guide-to-9-patch/</a></p></blockquote><p>While I was working on my first Android app, I found 9-patch (aka 9.png) to be confusing and poorly documented. After a little while, I finally picked up on how it works and decided to throw together something to help others figure it out.</p><p>Basically, 9-patch uses png transparency to do an advanced form of 9-slice or scale9. The guides are straight, 1-pixel black lines drawn on the edge of your image that define the scaling and fill of your image. By naming your image file name.9.png, Android will recognize the 9.png format and use the black guides to scale and fill your bitmaps.</p><p>Here’s a basic guide map:</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/9.png"></p><p>9-patch-guides</p><p>As you can see, you have guides on each side of your image. The TOP and LEFT guides are for scaling your image (i.e. 9-slice), while the RIGHT and BOTTOM guides define the fill area.</p><p>The black guide lines are cut-off/removed from your image - they won’t show in the app.  Guides must only be one pixel wide, so if you want a 48x48 button, your png will actually be 50x50. Anything thicker than one pixel will remain part of your image. (My examples have 4-pixel wide guides for better visibility. They should really be only 1-pixel).</p><p>Your guides must be solid black (#000000). Even a slight difference in color (#000001) or alpha will cause it to fail and stretch normally. This failure won’t be obvious either*, it fails silently! Yes. Really. Now you know.</p><p>Also you should keep in mind that remaining area of the one-pixel outline must be completely transparent. This includes the four corners of the image - those should always be clear. This can be a bigger problem than you realize. For example, if you scale an image in Photoshop it will add anti-aliased pixels which may include almost-invisible pixels which will also cause it to fail*. If you must scale in Photoshop, use the Nearest Neighbor setting in the Resample Image pulldown menu (at the bottom of the Image Size pop-up menu) to keep sharp edges on your guides.</p><p> This is actually a “fix” in the latest dev kit. Previously it would manifest itself as all of your other images and resources suddenly breaking, not the actually broken 9-patch image.</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/10.png"></p><p>scalable-area</p><p>The TOP and LEFT guides are used to define the scalable portion of your image - LEFT for scaling height, TOP for scaling width. Using a button image as an example, this means the button can stretch horizontally and vertically within the black portion and everything else, such as the corners, will remain the same size. The allows you to have buttons that can scale to any size and maintain a uniform look.</p><p>It’s important to note that 9-patch images don’t scale down - they only scale up. So it’s best to start as small as possible.</p><p>Also, you can leave out portions in the middle of the scale line. So for example, if you have a button with a sharp glossy edge across the middle, you can leave out a few pixels in the middle of the LEFT guide. The center horizontal axis of your image won’t scale, just the parts above and below it, so your sharp gloss won’t get anti-aliased or fuzzy.</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/11.png"></p><p>Fill area guides are optional and provide a way define the area for stuff like your text label. Fill determines how much room there is within your image to place text, or an icon, or other things. 9-patch isn’t just for buttons, it works for background images as well.</p><p>The above button &amp; label example is exaggerated simply to explain the idea of fill - the label isn’t completely accurate. To be honest, I haven’t experienced how Android does multi-line labels since a button label is usually a single row of text.</p><p>Finally, here’s a good demonstration of how scale and fill guides can vary, such as a LinearLayout with a background image &amp; fully rounded sides:</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/9Patch/12.jpg"></p><p>With this example, the LEFT guide isn’t used but we’re still required to have a guide. The background image don’t scale vertically; it just scales horizontally (based on the TOP guide). Looking at the fill guides, the RIGHT and BOTTOM guides extend beyond where they meet the image’s curved edges. This allows me to place my round buttons close to the edges of the background for a tight, fitted look.</p><p>So that’s it. 9-patch is super easy, once you get it. It’s not a perfect way to do scaling, but the fill-area and multi-line scale-guides does offer more flexibility than traditional 9-slice and scale9. Give it a try and you’ll figure it out quickly.</p><h2 id="其他資料"><a href="#其他資料" class="headerlink" title="其他資料"></a>其他資料</h2><ol><li><a href="https://developer.android.com/studio/write/draw9patch">Create resizable bitmaps (9-Patch files)</a></li><li><a href="https://developer.android.com/guide/topics/graphics/drawables#nine-patch">Drawables overview</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 9Patch </tag>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
            <tag> 第一行代碼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-RecyclerView</title>
      <link href="posts/7029147f/"/>
      <url>posts/7029147f/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView">RecyclerView</a>是Android一個更強大的控件,其不僅可以實現和ListView同樣的效果,還有優化了ListView中的各種不足。其可以實現數據縱向滾動,也可以實現橫向滾動(ListView做不到橫向滾動)。接下來講解RecyclerView的用法。</p><h1 id="RecyclerView-基本用法"><a href="#RecyclerView-基本用法" class="headerlink" title="RecyclerView 基本用法"></a>RecyclerView 基本用法</h1><p>因為<code>RecyclerView</code>屬於新增的控件,Android將RecyclerView定義在support庫裏。若要使用RecyclerView,第一步是要在<code>build.gradle</code>中添加對應的依賴庫。</p><h2 id="添加RecyclerView-依賴庫"><a href="#添加RecyclerView-依賴庫" class="headerlink" title="添加RecyclerView 依賴庫"></a>添加RecyclerView 依賴庫</h2><p>在<code>app/build.gradle</code>中的<code>dependencies閉包</code>添加以下內容：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.android.support:recyclerview-v7:27.1.1&#x27;</span></span><br></pre></td></tr></table></figure><p>然後點擊頂部的Sync Now進行同步</p><h2 id="修改-activity-main-xml"><a href="#修改-activity-main-xml" class="headerlink" title="修改 activity_main.xml"></a>修改 activity_main.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由於<code>RecyclerView</code>不是內置在系統SDK中,需要把其完整的包名路徑寫出來</p><h2 id="新建-Fruit-java"><a href="#新建-Fruit-java" class="headerlink" title="新建 Fruit.java"></a>新建 Fruit.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.imageId = imageId;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新建-fruit-item-xml"><a href="#新建-fruit-item-xml" class="headerlink" title="新建 fruit_item.xml"></a>新建 fruit_item.xml</h2><p>創建ImageView來顯示水果圖片,TextView來顯示水果名字。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新增適配器-FruitAdapter"><a href="#新增適配器-FruitAdapter" class="headerlink" title="新增適配器 FruitAdapter"></a>新增適配器 FruitAdapter</h2><p>為<code>RecyclerView</code>新增適配器<code>FruitAdapter</code>,並讓其繼承於<code>RecyclerView.Adapter</code>,把泛型指定為<code>FruitAdapter.ViewHolder</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  List&lt;Fruit&gt; mFruitList;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span> <span class="params">(View view)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName = (TextView) view.findViewById(R.id.fruitname);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">FruitAdapter</span> <span class="params">(List &lt;Fruit&gt; fruitList)</span></span>&#123;</span><br><span class="line">        mFruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="keyword">false</span>);</span><br><span class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Fruit fruit = mFruitList.get(position);</span><br><span class="line">        holder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        holder.fruitName.setText(fruit.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFruitList.size();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>定義內部類<code>ViewHolder</code>,並繼承<code>RecyclerView.ViewHolder</code>。傳入的View參數通常是RecyclerView子項的最外層佈局。</p></li><li><p>FruitAdapter構造函數,用於把要展示的數據源傳入,並賦予值給全局變量mFruitList。</p></li><li><p>FruitAdapter繼承RecyclerView.Adapter。因為必須重寫<code>onCreateViewHolder()</code>,<code>onBindViewHolder()</code>和<code>getItemCount()</code>三個方法</p><ul><li><code>onCreateViewHolder()</code>用於創建ViewHolder實例,並把加載的佈局傳入到構造函數去,再把ViewHolder實例返回。</li><li><code>onBindViewHolder()</code>則是用於對子項的數據進行賦值,會在每個子項被滾動到屏幕內時執行。<code>position</code>得到當前項的Fruit實例。</li><li><code>getItemCount()</code>返回RecyclerView的子項數目。</li></ul></li></ul><h2 id="修改-MainActivity-java"><a href="#修改-MainActivity-java" class="headerlink" title="修改 MainActivity.java"></a>修改 MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();</span><br><span class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</span><br><span class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Apple&quot;</span>, R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LayoutManager</code>用於指定RecyclerView的佈局方式。<code>LinearLayoutManager</code>指的是線性佈局。</p><p>運行效果：<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re1.png"></p><h1 id="修改RecyclerView-顯示效果"><a href="#修改RecyclerView-顯示效果" class="headerlink" title="修改RecyclerView 顯示效果"></a>修改RecyclerView 顯示效果</h1><h2 id="橫向滾動"><a href="#橫向滾動" class="headerlink" title="橫向滾動"></a>橫向滾動</h2><h3 id="修改-fruit-item-xml"><a href="#修改-fruit-item-xml" class="headerlink" title="修改 fruit_item.xml"></a>修改 fruit_item.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把LinearLayout改成垂直排列,因為水果名字長度不一樣,把寬度改為100dp。<br>ImageView和TextView都改為水平居中</p><h3 id="修改MainActivity-java"><a href="#修改MainActivity-java" class="headerlink" title="修改MainActivity.java"></a>修改MainActivity.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line">       initFruits();</span><br><span class="line">       RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</span><br><span class="line">       LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">       layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">       recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">       FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</span><br><span class="line">       recyclerView.setAdapter(adapter);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通過調用<code>setOrientation()</code>把佈局的排列方向改為水平排列。</p><p>得益於RecyclerView的設計,我們可以通過LayoutManager實現各種不同的排列方式的佈局。</p><p>運行結果:</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re2.png"></p><p>除了<code>LinearLayoutManager</code>,<code>RecyclerView</code>還提供了<code>GridLayoutManager(網格佈局)</code>和<code>StaggeredGridLayoutManager(瀑布流佈局)</code></p><h2 id="GridLayoutManager"><a href="#GridLayoutManager" class="headerlink" title="GridLayoutManager"></a>GridLayoutManager</h2><p>GridLayoutManager(網格佈局)</p><h3 id="修改MainActivity-java-1"><a href="#修改MainActivity-java-1" class="headerlink" title="修改MainActivity.java"></a>修改MainActivity.java</h3><p>修改 <code>MainActivity.java</code>,把</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br></pre></td></tr></table></figure><p>換成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GridLayoutManager layoutManager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><code>GridLayoutManager (Context context, int spanCount)</code></p><ul><li>Context: Current context, will be used to access resources.</li><li>spanCount int: The number of columns in the grid(網格的列數)</li></ul><p>運行結果:<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re3.png"></p><h2 id="StaggeredGridLayoutManager"><a href="#StaggeredGridLayoutManager" class="headerlink" title="StaggeredGridLayoutManager"></a>StaggeredGridLayoutManager</h2><p>StaggeredGridLayoutManager(瀑布流佈局)</p><h3 id="修改fruit-item-xml"><a href="#修改fruit-item-xml" class="headerlink" title="修改fruit_item.xml"></a>修改fruit_item.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把LinearLayout的寬度設為<code>match_parent</code>是因為瀑布流的寬度是 <strong>根據佈局的列數來自動適配的,而不是固定值</strong> 。(GridLayoutManager也是 <strong>根據佈局的列數來自動適配的</strong>）</p><h3 id="修改-MainActivity-java-1"><a href="#修改-MainActivity-java-1" class="headerlink" title="修改 MainActivity.java"></a>修改 MainActivity.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();</span><br><span class="line">        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);</span><br><span class="line">        StaggeredGridLayoutManager layoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>,StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">        recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        FruitAdapter adapter = <span class="keyword">new</span> FruitAdapter(fruitList);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Fruit apple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Apple&quot;</span>), R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            Fruit banana = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Banana&quot;</span>), R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            Fruit orange = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Orange&quot;</span>), R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Watermelon&quot;</span>), R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            Fruit pear = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Pear&quot;</span>), R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            Fruit grape = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Grape&quot;</span>), R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Pineapple&quot;</span>), R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Strawberry&quot;</span>), R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Cherry&quot;</span>), R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            Fruit mango = <span class="keyword">new</span> Fruit(getRandomLengthName(<span class="string">&quot;Mango&quot;</span>), R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRandomLengthName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length= random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;  <span class="comment">// 產生1-20的隨機數</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            builder.append(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  builder.<span class="function">function <span class="title">toString</span><span class="params">()</span> </span>&#123; [<span class="keyword">native</span> code] &#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StaggeredGridLayoutManager layoutManager = new StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL);</code><br>StaggeredGridLayoutManager傳入2個參數,第一個是佈局的列數,第二個是佈局的排列方向。</p><p><code>random.nextInt(20)+1</code> 產生1-20的隨機數<br>運行效果:</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re4.png"></p><h2 id="GridLayoutManager和StaggeredGridLayout的區別"><a href="#GridLayoutManager和StaggeredGridLayout的區別" class="headerlink" title="GridLayoutManager和StaggeredGridLayout的區別"></a>GridLayoutManager和StaggeredGridLayout的區別</h2><table border="0"><tr ><td ><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re5.png" alt="GridLayoutManager" ></th><td ><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re6.png" alt="StaggeredGridLayout" ></th></tr></table><p>左圖是GridLayoutManager,右圖是StaggeredGridLayout。<br>當從顯示效果來看,已經一目瞭然。<br>GridLayoutManager是會固定高度的,所以會留下很多空白區域。<br>相反,StaggeredGridLayout並不會固定高度,以至於就算子項的高度不一致,下一行的會自動靠攏上一行。</p><h1 id="RecyclerView-的點擊事件"><a href="#RecyclerView-的點擊事件" class="headerlink" title="RecyclerView 的點擊事件"></a>RecyclerView 的點擊事件</h1><h2 id="修改-FruitAdapter-java"><a href="#修改-FruitAdapter-java" class="headerlink" title="修改 FruitAdapter.java"></a>修改 FruitAdapter.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">FruitAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  List&lt;Fruit&gt; mFruitList;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        View fruitView;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span> <span class="params">(View view)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            fruitView = view;</span><br><span class="line">            fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName = (TextView) view.findViewById(R.id.fruitname);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">FruitAdapter</span> <span class="params">(List &lt;Fruit&gt; fruitList)</span></span>&#123;</span><br><span class="line">        mFruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.fruit_item,parent,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">        holder.fruitView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</span><br><span class="line">                Fruit fruit = mFruitList.get(position);</span><br><span class="line">                Toast.makeText(view.getContext(), <span class="string">&quot;you clicked view&quot;</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        holder.fruitImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> position = holder.getAdapterPosition();</span><br><span class="line">                Fruit fruit = mFruitList.get(position);</span><br><span class="line">                Toast.makeText(view.getContext(), <span class="string">&quot;you clicked image&quot;</span> + fruit.getName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改ViewHolder,添加fruitView變量來保存子項最外層佈局的實例。</p><p>運行效果：<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/RecyclerView/re7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
            <tag> RecyclerView </tag>
            
            <tag> 佈局 </tag>
            
            <tag> Layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為Blog添加版權説明</title>
      <link href="posts/d87ce901/"/>
      <url>posts/d87ce901/</url>
      
        <content type="html"><![CDATA[<p>最近更換了新的Hexo主題<a href="https://github.com/iTimeTraveler/hexo-theme-hiker">hexo-theme-hiker</a>,覺得挺好看的。文章底部沒有版權説明,自己動手加上。</p><h2 id="新建文件-copyright-ejs"><a href="#新建文件-copyright-ejs" class="headerlink" title="新建文件 copyright.ejs"></a>新建文件 copyright.ejs</h2><p>在<code>themes\hiker\layout\_partial</code>新建文件<code>copyright.ejs</code></p><p>打開<code>copyright.ejs</code>,添加一下內容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;post-copyright&quot;&gt;</span><br><span class="line">          &lt;li class&#x3D;&quot;post-copyright-author&quot;&gt;</span><br><span class="line">          &lt;strong&gt;&lt;%&#x3D; __(&#39;copyright.author&#39;) %&gt; &lt;&#x2F;strong&gt;&lt;%&#x3D; config.author%&gt;&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li class&#x3D;&quot;post-copyright-link&quot;&gt;</span><br><span class="line">          &lt;strong&gt;&lt;%&#x3D; __(&#39;copyright.link&#39;) %&gt; &lt;&#x2F;strong&gt;</span><br><span class="line">          &lt;a href&#x3D;&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;&lt;%&#x3D; post.title %&gt;&quot;&gt;&lt;%- config.url %&gt;&#x2F;&lt;%- post.path %&gt;&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li class&#x3D;&quot;post-copyright-license&quot;&gt;</span><br><span class="line">            &lt;strong&gt;&lt;%&#x3D; __(&#39;copyright.license_title&#39;) %&gt;  &lt;&#x2F;strong&gt;</span><br><span class="line">            &lt;%&#x3D; __(&#39;copyright.left_license_content&#39;) %&gt;&lt;a rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-nd&#x2F;4.0&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;CC BY-NC-ND 4.0&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;%&#x3D; __(&#39;copyright.right_license_content&#39;) %&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;div&gt;</span><br></pre></td></tr></table></figure><h2 id="修改article-ejs文件"><a href="#修改article-ejs文件" class="headerlink" title="修改article.ejs文件"></a>修改article.ejs文件</h2><p>打開<code>themes\hiker\layout\_partial\article.ejs</code>添加一下內容,位置介於donate和comment之間</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.donate.enable)&#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;donate&#39;) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">       &lt;!-- 要添加的內容 --&gt;</span><br><span class="line">      &lt;% if (!index &amp;&amp; theme.copyright.enable)&#123; %&gt;</span><br><span class="line">      &lt;%- partial(&#39;copyright&#39;) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;!----&gt;</span><br><span class="line">      &lt;% if (!index &amp;&amp; post.comments &amp;&amp; (theme.gentie_productKey || theme.duoshuo_shortname || theme.disqus_shortname || theme.uyan_uid || theme.wumii || theme.livere_shortname))&#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comment&#39;) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="修改-article-styl"><a href="#修改-article-styl" class="headerlink" title="修改 article.styl"></a>修改 article.styl</h2><p>修改<code>themes\hiker\source\css\_partial\article.styl</code>,在末端添加以下內容。</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#FF1700</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F9F9F9</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-copyright</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改語言文件"><a href="#修改語言文件" class="headerlink" title="修改語言文件"></a>修改語言文件</h2><p>在themes\hiker\languages中,找到你應用的語言文件,例如zh-TW,打開並添加以下內容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">&quot;作者: &quot;</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">&quot;文章連結: &quot;</span></span><br><span class="line">    <span class="attr">license_title:</span> <span class="string">&quot;版權聲明: &quot;</span></span><br><span class="line">    <span class="attr">left_license_content:</span> <span class="string">&quot;本網誌所有文章除特別聲明外,均採用 &quot;</span></span><br><span class="line">    <span class="attr">right_license_content:</span> <span class="string">&quot;許可協議。轉載請註明出處!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="修改主題設置文件"><a href="#修改主題設置文件" class="headerlink" title="修改主題設置文件"></a>修改主題設置文件</h2><p>打開<code>themes\hiker\_config.yml</code>,添加以下內容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#版權信息</span></span><br><span class="line"><span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最後當然是 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 就可以看到結果了</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Add_a_copyright_notice_to_the_blog/COPYRIGHT.png"></p><h2 id="資料參考"><a href="#資料參考" class="headerlink" title="資料參考"></a>資料參考</h2><p><a href="http://okbtm.com/archives/ead2b478.html">為Hexo icarus添加版權説明</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主題 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-ListView</title>
      <link href="posts/75c18a/"/>
      <url>posts/75c18a/</url>
      
        <content type="html"><![CDATA[<p>手機屏幕空間有限，能顯示的內容不多。可以藉助ListView來顯示更多的內容。<br>ListView允許用户通過上下滑動來將屏幕外的數據滾動到屏幕內，同時屏幕內原有的數據滾動出屏幕，從而顯示更多的數據內容。</p><h1 id="ListView的簡單用法"><a href="#ListView的簡單用法" class="headerlink" title="ListView的簡單用法"></a>ListView的簡單用法</h1><h2 id="修改activity-main-xml"><a href="#修改activity-main-xml" class="headerlink" title="修改activity_main.xml"></a>修改activity_main.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>android:layout_width</code>和<code>android:layout_height</code>設置為<code>match_parent</code>可以把ListView佔滿整個布局的空間。</p><h2 id="修改MainActivity-java"><a href="#修改MainActivity-java" class="headerlink" title="修改MainActivity.java"></a>修改MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String [] data = &#123;<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Watermelon&quot;</span>,<span class="string">&quot;Pear&quot;</span>,<span class="string">&quot;Grape&quot;</span>,<span class="string">&quot;Pineapple&quot;</span>,<span class="string">&quot;Strawberry&quot;</span>,<span class="string">&quot;Cherry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mango&quot;</span>,<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Watermelon&quot;</span>,<span class="string">&quot;Pear&quot;</span>,<span class="string">&quot;Grape&quot;</span>,<span class="string">&quot;Pineapple&quot;</span>,<span class="string">&quot;Strawberry&quot;</span>,<span class="string">&quot;Cherry&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Mango&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//ArraryAdapter適配器，通過泛型來指定要適配的數據類型，然後在構造函數中把要適配的數據傳入。</span></span><br><span class="line">        ArrayAdapter&lt;String&gt; arrayAdapter= <span class="keyword">new</span> ArrayAdapter&lt;String&gt; (</span><br><span class="line">                MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1,data);</span><br><span class="line">        ListView listView = (ListView) findViewById(R.id.listview);</span><br><span class="line">        listView.setAdapter(arrayAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>例子中以數組的方式來傳遞數據，裏面包含很多水果的名字。<br>數組中的數據無法直接傳遞給ListView,這時需要藉助適配器(Adapter)來完成。<br>Android中提供了很多適配器,這裏使用的是ArrayAdapter,它可以通過泛型來指定要適配的數據類型，然後在構造函數中把要適配的數據傳入。<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/ListView/ArrayAdapter.png"><br>因為數據都是字符串，所以ArrayAdapter的泛型指定為String。<br>ArrayAdapter的構造函數傳入3個數據：</p><ul><li>1是Context 傳入當前的上下文</li><li>2是ListView子項布局的ID</li><li>3是要適配的數據</li></ul><p><code>android.R.layout.simple_list_item_1</code>作為ListView子項布局的ID，這時安卓內置的布局文件。裏面只有一個TextView，可用於顯示一段文本。</p><p>最後調用ListView的setAdapter()方法將構建好的適配器對象傳遞進去。</p><p>運行效果：<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/ListView/listview1.png"></p><h1 id="定製ListView界面"><a href="#定製ListView界面" class="headerlink" title="定製ListView界面"></a>定製ListView界面</h1><p> 對ListView界面進行定製，讓其可以顯示更豐富的內容。<br> 為每個水果加上圖片</p><h2 id="新建fruit-java"><a href="#新建fruit-java" class="headerlink" title="新建fruit.java"></a>新建fruit.java</h2><p>定義一個實體類，作為ListView適配器的適配類型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span> <span class="params">(String name,<span class="keyword">int</span> imageId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.imageId = imageId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新建布局文件-fruit-item-xml"><a href="#新建布局文件-fruit-item-xml" class="headerlink" title="新建布局文件 fruit_item.xml"></a>新建布局文件 fruit_item.xml</h2><p>創建ImageView來顯示水果圖片，TextView來顯示水果名字。並讓TextView在垂直方向上居中顯示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruit_image&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fruitname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新建-FruitAdapter-java"><a href="#新建-FruitAdapter-java" class="headerlink" title="新建 FruitAdapter.java"></a>新建 FruitAdapter.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Fruit</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FruitAdapter</span><span class="params">(Context context, <span class="keyword">int</span> textViewResourceId, List&lt;Fruit&gt; objects)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,textViewResourceId,objects);</span><br><span class="line">        resourceId = textViewResourceId;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</span><br><span class="line">       Fruit fruit = getItem(position); <span class="comment">//獲取當前項的Fruit實例</span></span><br><span class="line">       View view= LayoutInflater.from(getContext()).inflate(resourseId,parent,<span class="keyword">false</span>);</span><br><span class="line">       ImageView fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">       TextView fruitName =(TextView) view.findViewById(R.id.fruitname);</span><br><span class="line">       fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">       fruitName.setText(fruit.getName());</span><br><span class="line">       <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FruitAdapter 重寫了父類的構造函數，用於將上下文，ListView子項布局的ID和要適配的數據傳遞進去。</p><p>重寫getView（）方法，這個方法在每個子項被滾動到屏幕內的時候會被調用。<br>首先通過getItem()得到當前的項的Fruit實例，然後使用LayoutInflater來為這個子項加載我們傳入的布局。</p><p><code>LayoutInflater.from(getContext()).inflate(resourseId,parent,false);</code><br>inflate接受三個參數</p><ul><li>一個是加載的布局文件id</li><li>另一個是給加載好的布局再添加一個父布局</li><li><code>false</code>表示只讓我們在父布局中聲明的layout屬性生效，但不會為這個view添加父布局。</li></ul><h2 id="修改-MainActivity-java"><a href="#修改-MainActivity-java" class="headerlink" title="修改 MainActivity.java"></a>修改 MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fruit&gt; fruitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">// 初始化水果數據</span></span><br><span class="line"></span><br><span class="line">       FruitAdapter arrayAdapter = <span class="keyword">new</span> FruitAdapter(MainActivity.<span class="keyword">this</span>,R.layout.fruit_item,fruitList);</span><br><span class="line"></span><br><span class="line">        ListView listView = (ListView) findViewById(R.id.listview);</span><br><span class="line">        listView.setAdapter(arrayAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>( <span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">           Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Apple&quot;</span>,R.drawable.apple_pic);</span><br><span class="line">           fruitList.add(apple);</span><br><span class="line">           Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">&quot;Banana&quot;</span>,R.drawable.banana_pic);</span><br><span class="line">           fruitList.add(banana);</span><br><span class="line">           Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">&quot;Orange&quot;</span>,R.drawable.orange_pic);</span><br><span class="line">           fruitList.add(orange);</span><br><span class="line">           Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">&quot;Watermelon&quot;</span>,R.drawable.watermelon_pic);</span><br><span class="line">           fruitList.add(watermelon);</span><br><span class="line">           Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pear&quot;</span>,R.drawable.pear_pic);</span><br><span class="line">           fruitList.add(pear);</span><br><span class="line">           Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">&quot;Grape&quot;</span>,R.drawable.grape_pic);</span><br><span class="line">           fruitList.add(grape);</span><br><span class="line">           Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pineapple&quot;</span>,R.drawable.pineapple_pic);</span><br><span class="line">           fruitList.add(pineapple);</span><br><span class="line">           Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Strawberry&quot;</span>,R.drawable.strawberry_pic);</span><br><span class="line">           fruitList.add(strawberry);</span><br><span class="line">           Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Cherry&quot;</span>,R.drawable.cherry_pic);</span><br><span class="line">           fruitList.add(cherry);</span><br><span class="line">           Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">&quot;Mango&quot;</span>,R.drawable.mango_pic);</span><br><span class="line">           fruitList.add(mango);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加initFruit()方法來初始化所有的水果數據。</p><p>運行結果：<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/ListView/listview2.png"></p><h1 id="提升ListView的運行效率"><a href="#提升ListView的運行效率" class="headerlink" title="提升ListView的運行效率"></a>提升ListView的運行效率</h1><p>上面的代碼中，FruitAdapter的getView()每次都將布局重新加載了一遍，當ListView快速滾動時，就會成為性能的瓶頸。<br>為了解決這問題，需要對ListView進行優化。</p><p>修改FruitAdapter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</span><br><span class="line">        Fruit fruit = getItem(position); <span class="comment">//獲取當前項的Fruit實例</span></span><br><span class="line">        View view;</span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</span><br><span class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</span><br><span class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">            viewHolder.fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">            viewHolder.fruitName =(TextView) view.findViewById(R.id.fruitname);</span><br><span class="line">            view.setTag(viewHolder);<span class="comment">// 將ViewHolder存儲在View中。</span></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            view = convertView;</span><br><span class="line">            viewHolder=(ViewHolder)view.getTag(); <span class="comment">//重新獲取ViewHolder</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        viewHolder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        viewHolder.fruitName.setText(fruit.getName());</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>getView中的convertView參數，用於將之前加載好的布局進行緩存，以便以後可以進行重用。</p><ul><li>convertView為null時，使用LayoutInflater去加載布局。</li><li>如果不是Null,則直接對convertView進行重用。</li></ul><p>內部類ViewHolder用於對控件的實例進行緩存。  </p><ul><li>當convertView為null時<br>創建ViewHolder對象，並將控件的實例都存到ViewHolder去，然後調用View的setTag()方法，將ViewHolder對象存儲於View中。</li><li>當convertView不為null時<br>調用View的setTag()方法，把ViewHolder重新取出。</li></ul><h1 id="LiewView的點擊事件"><a href="#LiewView的點擊事件" class="headerlink" title="LiewView的點擊事件"></a>LiewView的點擊事件</h1><p>修改MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initFruits();<span class="comment">// 初始化水果數據</span></span><br><span class="line"></span><br><span class="line">        FruitAdapter arrayAdapter = <span class="keyword">new</span> FruitAdapter(MainActivity.<span class="keyword">this</span>,R.layout.fruit_item,fruitList);</span><br><span class="line"></span><br><span class="line">        ListView listView = (ListView) findViewById(R.id.listview);</span><br><span class="line">        listView.setAdapter(arrayAdapter);</span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view,<span class="keyword">int</span> position, <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">                Fruit fruit = fruitList.get(position);</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,fruit.getName(),Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>使用setOnItemClickListener（）為ListView註冊了一個監聽器。<br>通過position參數判斷出用户點擊的是哪一個子項。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
            <tag> ListView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-創建自定義控件</title>
      <link href="posts/44aa2b74/"/>
      <url>posts/44aa2b74/</url>
      
        <content type="html"><![CDATA[<h2 id="自定義控件-引入布局"><a href="#自定義控件-引入布局" class="headerlink" title="自定義控件 - 引入布局"></a>自定義控件 - 引入布局</h2><p>常見控件和布局的繼承結構<br><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Create_a_custom_components/1.png"><br>所有的控件都是直接或者間接繼承於 View<br>所有的布局都是直接或者間接繼承於 ViewGroup<br>View 是 Android 中最基本的一種 UI 控件,它可以在屏幕上繪製一塊矩形區域,並能響應這塊區域的各種事件。<br>ViewGroup 是特殊的一種 View,是一個用於放置控件和布局的容器</p><p>以添加 iPhone 風格的標題欄為例：<br>當多個活動界面都要使用這個標題欄時,我們可以通過引入布局的方式,這樣可以避免每個活動界面都要寫一遍同樣的標題代碼,減少代碼重複。</p><h3 id="創建布局文件"><a href="#創建布局文件" class="headerlink" title="創建布局文件"></a>創建布局文件</h3><p>新建一個 title.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/title_bg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/back_bg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Back&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/title_back&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Title Text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/title_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/title_edit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/edit_bg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Edit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>android:background 用於為控件或布局制定一個背景,可以使用顏色或者圖片<br>android:layout_margin 指定控件在上下左右方向上偏移的距離</p><h3 id="引入布局"><a href="#引入布局" class="headerlink" title="引入布局"></a>引入布局</h3><p>在創建了布局後,我們要引入布局。在需要引入界面的 Activity 界面布局中,添加<code>&lt;include layout=&quot;@layout/title&quot;/&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/title&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="隱藏系統自帶的標題欄"><a href="#隱藏系統自帶的標題欄" class="headerlink" title="隱藏系統自帶的標題欄"></a>隱藏系統自帶的標題欄</h3><p>通過調用 getSupportActionBar()方法來獲得 ActionBar 的實例,然後再調用 ActionBar 的 hide()方法將標題欄隱藏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>)&#123;</span><br><span class="line">            actionBar.hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Create_a_custom_components/2.png"></p><h2 id="創建自定義控件"><a href="#創建自定義控件" class="headerlink" title="創建自定義控件"></a>創建自定義控件</h2><p>引入布局的方式雖然可以減少很多重複的布局代碼,但是當布局中的控件要求能夠響應事件,我們還是需要在每個活動中去為這些控件單獨編寫事件響應代碼。以標題欄為例,這些控件在每一個布局中所需的功能都是一樣的,這時我們可以使用自定義控件的方式,避免每個活動都要去編寫同樣的代碼。</p><h3 id="新建-TitleLayout"><a href="#新建-TitleLayout" class="headerlink" title="新建 TitleLayout"></a>新建 TitleLayout</h3><p>新建 TitleLayout 並繼承 LinearLayout。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleLayout</span><span class="params">(Context context , AttributeSet attributeSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,attributeSet);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重寫 LinearLayout 中帶有兩個參數的構造函數。<br>通過 LayoutInflater 來對標題欄進行動態加載。<br><code>LayoutInflater.from(context).inflate(R.layout.title,this);</code></p><ul><li>from（）方法構建出一個 LayoutInflater 對象</li><li>調用 inflate（）方法就可以動態加載一個布局文件。inflate 接受兩個參數<ul><li>一個是加載的布局文件 id</li><li>另一個是給加載好的布局再添加一個父布局</li></ul></li></ul><h3 id="修改活動布局-xml"><a href="#修改活動布局-xml" class="headerlink" title="修改活動布局.xml"></a>修改活動布局.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">  //完整類名</span><br><span class="line">   <span class="tag">&lt;<span class="name">com.example.hwy01.uicustomviews.TitleLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">com.example.hwy01.uicustomviews.TitleLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加自定義控件需要先指明控件的完整類名,如代碼中的<code>com.example.hwy01.uicustomviews.TitleLayout</code></p><h3 id="添加按鈕註冊事件"><a href="#添加按鈕註冊事件" class="headerlink" title="添加按鈕註冊事件"></a>添加按鈕註冊事件</h3><p>修改 TitleLayout</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleLayout</span><span class="params">(Context context , AttributeSet attributeSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,attributeSet);</span><br><span class="line"></span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>);</span><br><span class="line">        Button back = (Button) findViewById(R.id.title_back);</span><br><span class="line">        Button edit = (Button) findViewById(R.id.title_edit);</span><br><span class="line"></span><br><span class="line">        back.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">           ((Activity)getContext()).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        edit.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(getContext(),<span class="string">&quot;You clicked Edit Button&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
            <tag> 控件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-四大Layout</title>
      <link href="posts/125d29fb/"/>
      <url>posts/125d29fb/</url>
      
        <content type="html"><![CDATA[<h2 id="LinerLayout-線性布局"><a href="#LinerLayout-線性布局" class="headerlink" title="LinerLayout 線性布局"></a>LinerLayout 線性布局</h2><p>LinerLayout, 中文名為線性布局。這個布局會將它所包含的控件在線性方向上依次排列。  </p><p>我們可以通過<code>android:orientation</code>屬性來指定排列方向。  </p><p><code>vertical</code>為垂直方向,<code>horizontal</code>為水平方向</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button 1&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 2&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 3&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><p>運行效果：  </p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/LINERLAYOUT2.png"></p><p>注意：如果是<code>vertical</code>垂直方向,則内部的控件不能將<code>android:layout_height</code>指定為<code>match_parent</code>,因爲這樣的話,單獨的一個控件就已經把整個垂直方向佔據了,接下來的控件就沒有可以放置的位置了,而導致其它的控件無法顯示。同理,如果是<code>horizontal</code>水平方向,則内部的控件不能將<code>android:layout_width</code>指定為<code>match_parent</code>  </p><p><code>android:layout_gravity</code>用於指定控件在布局中的對齊方式。  </p><p>當<code>vertical</code>垂直方向,只有水平方向上的對齊方式才會生效。  </p><p>當<code>horizontal</code>水平方向,只有垂直方向上的對齊方式才會生效。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button 1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;top&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button 3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/LINERLAYOUT1.png"></p><p>android:layout_weight 可以用比例的方式來指定控件的大小,其在手機屏幕的適配上起到很重要的作用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_weight</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:hint</span>=<span class="string">&quot;Type something&quot;</span></span></span><br><span class="line"><span class="tag">     /&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:text</span>=<span class="string">&quot;send&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/LINERLAYOUT3.png"></p><h2 id="RelativeLayout-相對布局"><a href="#RelativeLayout-相對布局" class="headerlink" title="RelativeLayout 相對布局"></a>RelativeLayout 相對布局</h2><p>RelativeLayout又稱爲相對布局,通過相對定位的方式讓控件出現在布局的任何地方。</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/relativelayout1.png">  </p><p>父容器定位屬性示意圖</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/relativelayout2.png"></p><p>圖片來自<a href="http://www.runoob.com/w3cnote/android-tutorial-relativelayout.html">runoob</a>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;button5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/relativelayout3.png"></p><p>以上是相對于父布局定位的。Button1和父布局的左上角對齊,Button2和父布局的右上角對齊,Button3居中顯示,Button4和父布局的左下角對齊,Button5和父布局的左下角對齊。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_above</span>=<span class="string">&quot;@id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_toLeftOf</span>=<span class="string">&quot;@id/button3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button2&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_above</span>=<span class="string">&quot;@id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_toRightOf</span>=<span class="string">&quot;@id/button3&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button4&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_toLeftOf</span>=<span class="string">&quot;@id/button3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button5&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;button5&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_toRightOf</span>=<span class="string">&quot;@id/button3&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/relativelayout4.png"></p><p>以上是每個控件都是以Button3 控件進行定位的。  </p><ul><li><code>android:layout_above</code>讓一個控件位於另一個控件上方,需要指定相對控件id的引用。上方為<code>android:layout_above=&quot;@id/button3&quot;</code>在Button3的上方。</li><li><code>android:layout_below</code>讓一個控件位於另一個控件下方。</li><li><code>android:layout_toLeftOf</code>讓一個控件位於另一個控件左側。</li><li><code>android:layout_toRightOf</code>讓一個控件位於另一個控件右側  </li></ul><h2 id="FrameLayout-幀布局"><a href="#FrameLayout-幀布局" class="headerlink" title="FrameLayout 幀布局"></a>FrameLayout 幀布局</h2><p>FrameLayout又稱爲幀布局,所有的控件都會默認擺放在布局的左上角。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;This is TextView&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/imageview&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:src</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;button&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/framelayout1.png"></p><p>所有的控件都位於布局的左上角,而且按照順序曡在一起。</p><p>我們可以通過<code>android:layout_gravity</code>去指定控件在布局中的對齊方式。  </p><h2 id="Percent-support-lib-百分比布局"><a href="#Percent-support-lib-百分比布局" class="headerlink" title="Percent-support-lib 百分比布局"></a>Percent-support-lib 百分比布局</h2><p>只有<code>LinearLayout</code>支持使用layout_weight屬性來實現按比例指定控件大小的功能,其他的布局并不支持這屬性。因此,Android引入了一種全新的布局方式來解決這個問題—–百分比布局。可以直接指定控件在布局中所占的百分比。  </p><p>百分比布局為<code>FrameLayout</code>和<code>RelativeLayout</code>進行了功能擴展,提供了<code>PercentFrameLayout</code>和<code>PercentRelativeLayout</code>兩個全新的布局。</p><p>在<code>build.gradle</code>添加百分比布局的依賴。  </p><p>打開<code>app/build.gradle</code>,在dependencies閉包添加以下内容：</p><p><code>implementation &#39;com.android.support:percent:25.3.0&#39;</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">&#x27;libs&#x27;</span>, <span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:appcompat-v7:27.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:percent:25.3.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.1.2&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;com.android.support.test:runner:1.0.2&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;com.android.support.test.espresso:espresso-core:3.0.2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### PercentRelativeLayout</span><br><span class="line"></span><br><span class="line">修改xml文件</span><br><span class="line"></span><br><span class="line">```XML</span><br><span class="line">&lt;android.support.percent.PercentRelativeLayout</span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line">    &lt;View</span><br><span class="line">        android:id=<span class="string">&quot;@+id/top_left&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:layout_alignParentTop=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;#ff44aacc&quot;</span></span><br><span class="line">        app:layout_heightPercent=<span class="string">&quot;20%&quot;</span></span><br><span class="line">        app:layout_widthPercent=<span class="string">&quot;70%&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:id=<span class="string">&quot;@+id/top_right&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:layout_alignParentTop=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_toRightOf=<span class="string">&quot;@+id/top_left&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;#ffe40000&quot;</span></span><br><span class="line">        app:layout_heightPercent=<span class="string">&quot;20%&quot;</span></span><br><span class="line">        app:layout_widthPercent=<span class="string">&quot;30%&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:id=<span class="string">&quot;@+id/bottom&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@+id/top_left&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;#ff00ff22&quot;</span></span><br><span class="line">        app:layout_heightPercent=<span class="string">&quot;80%&quot;</span> /&gt;</span><br><span class="line">&lt;/android.support.percent.PercentRelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/percentrelativelayout.png"></p><p>可以看到通過<code>app:layout_heightPercent</code>和<code>app:layout_widthPercent</code>兩個參數進行百分比設定。</p><h3 id="PercentFrameLayout"><a href="#PercentFrameLayout" class="headerlink" title="PercentFrameLayout"></a>PercentFrameLayout</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.percent.PercentFrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left|top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right|top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left|bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Button4&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right|bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.percent.PercentFrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>運行效果：</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Four_Layout/percentframelayout.png"></p><p>其它的屬性還有  </p><ul><li>app:layout_heightPercent</li><li>app:layout_widthPercent</li><li>app:layout_marginBottomPercent</li><li>app:layout_marginEndPercent</li><li>app:layout_marginLeftPercent</li><li>app:layout_marginPercent</li><li>app:layout_marginRightPercent</li><li>app:layout_marginStartPercent</li><li>app:layout_marginTopPercent</li></ul><p>可以參考<a href="https://github.com/JulienGenoud/android-percent-support-lib-sample">android-percent-support-lib-sample</a>和<a href="https://blog.csdn.net/lmj623565791/article/details/46695347">Android 百分比布局库(percent-support-lib) 解析与扩展</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
            <tag> Layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo和Next主題的相關設置（持續更新）</title>
      <link href="posts/31391d01/"/>
      <url>posts/31391d01/</url>
      
        <content type="html"><![CDATA[<h1 id="字數統計和閲讀時長-網站底部-文章内"><a href="#字數統計和閲讀時長-網站底部-文章内" class="headerlink" title="字數統計和閲讀時長(網站底部/文章内)"></a>字數統計和閲讀時長(網站底部/文章内)</h1><p>效果如圖</p><p>文章内</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/post-wordcount.png"></p><p>網頁頂部</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/page-wordcount.png"></p><h2 id="安裝插件"><a href="#安裝插件" class="headerlink" title="安裝插件"></a>安裝插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><h2 id="修改-站點配置文件"><a href="#修改-站點配置文件" class="headerlink" title="修改 站點配置文件"></a>修改 <code>站點配置文件</code></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"> <span class="comment">#文章内是否顯示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line"> <span class="comment"># 網頁底部是否顯示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="修改-主題配置文件"><a href="#修改-主題配置文件" class="headerlink" title="修改 主題配置文件"></a>修改 <code>主題配置文件</code></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#文章中的顯示是否顯示文字（本文字數|閱讀時長）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#網頁底部的顯示是否顯示文字（站點總字數|站點閱讀時長）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Average Word Length (chars count in word)</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="comment"># Words Per Minute</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure><h1 id="文章底部添加版權信息"><a href="#文章底部添加版權信息" class="headerlink" title="文章底部添加版權信息"></a>文章底部添加版權信息</h1><p>效果如圖</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/copyright.png"></p><p>修改 <code>主題配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 enable: 設爲true</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;</span> <span class="string">rel=&quot;external</span> <span class="string">nofollow&quot;</span> <span class="string">target=&quot;_blank&quot;&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h1 id="網頁底部信息隱藏"><a href="#網頁底部信息隱藏" class="headerlink" title="網頁底部信息隱藏"></a>網頁底部信息隱藏</h1><p>只需要把 <code>主題配置文件</code>的相關資料改爲<strong>false</strong>就行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2018</span></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="給文章增加陰影效果"><a href="#給文章增加陰影效果" class="headerlink" title="給文章增加陰影效果"></a>給文章增加陰影效果</h1><p>效果如圖  </p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/post-shadow.png"></p><p>修改<code>custom.styl</code> 文件,具體為<code>themes/next/source/css/_custom/custom.styl</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 為文章添加陰影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="為博客添加寵物"><a href="#為博客添加寵物" class="headerlink" title="為博客添加寵物"></a>為博客添加寵物</h1><p>效果如圖</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/live2d.png"></p><h2 id="安裝依賴包"><a href="#安裝依賴包" class="headerlink" title="安裝依賴包"></a>安裝依賴包</h2><p>在站點根目錄,打開Git Bash,安裝hexo-helper-live2d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><h2 id="在站點配置文件或者主題配置文件添加以下内容"><a href="#在站點配置文件或者主題配置文件添加以下内容" class="headerlink" title="在站點配置文件或者主題配置文件添加以下内容"></a>在<code>站點配置文件</code>或者<code>主題配置文件</code>添加以下内容</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="安裝需要的寵物文件"><a href="#安裝需要的寵物文件" class="headerlink" title="安裝需要的寵物文件"></a>安裝需要的寵物文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &#123;packagename&#125;</span><br></pre></td></tr></table></figure><p>如效果圖所示的寵物名為haruto, 則為 <code>npm install live2d-widget-model-haruto</code>,其他寵物包點擊<a href="https://github.com/xiazeyu/live2d-widget-models">live2d-widget-models</a>。如果需要修改寵物的位置,可以在<code>display</code>下添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 水平位置</span></span><br><span class="line"><span class="attr">hOffset:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 垂直位置</span></span><br><span class="line"><span class="attr">vOffset:</span> <span class="number">-20</span></span><br></pre></td></tr></table></figure><p>詳細内容可參考<a href="https://github.com/EYHN/hexo-helper-live2d"><strong>hexo-helper-live2d</strong></a></p><h1 id="添加網站已運行時間"><a href="#添加網站已運行時間" class="headerlink" title="添加網站已運行時間"></a>添加網站已運行時間</h1><p>效果如圖</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/counttime.png"></p><p>在<code>themes/layout/_parrials/footer.swig</code> 中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;sitetime&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;script language&#x3D;javascript&gt;</span><br><span class="line">function siteTime()&#123;</span><br><span class="line">window.setTimeout(&quot;siteTime()&quot;, 1000);</span><br><span class="line">var seconds &#x3D; 1000;</span><br><span class="line">var minutes &#x3D; seconds * 60;</span><br><span class="line">var hours &#x3D; minutes * 60;</span><br><span class="line">var days &#x3D; hours * 24;</span><br><span class="line">var years &#x3D; days * 365;</span><br><span class="line">var today &#x3D; new Date();</span><br><span class="line">var todayYear &#x3D; today.getFullYear();</span><br><span class="line">var todayMonth &#x3D; today.getMonth()+1;</span><br><span class="line">var todayDate &#x3D; today.getDate();</span><br><span class="line">var todayHour &#x3D; today.getHours();</span><br><span class="line">var todayMinute &#x3D; today.getMinutes();</span><br><span class="line">var todaySecond &#x3D; today.getSeconds();</span><br><span class="line">var t1 &#x3D; Date.UTC(2018,06,07,12,00,00); &#x2F;&#x2F; 設置建立網站的時間</span><br><span class="line">var t2 &#x3D; Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span><br><span class="line">var diff &#x3D; t2-t1;</span><br><span class="line">var diffYears &#x3D; Math.floor(diff&#x2F;years);</span><br><span class="line">var diffDays &#x3D; Math.floor((diff&#x2F;days)-diffYears*365);</span><br><span class="line">var diffHours &#x3D; Math.floor((diff-(diffYears*365+diffDays)*days)&#x2F;hours);</span><br><span class="line">var diffMinutes &#x3D; Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)&#x2F;minutes);</span><br><span class="line">var diffSeconds &#x3D; Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)&#x2F;seconds);</span><br><span class="line">document.getElementById(&quot;sitetime&quot;).innerHTML&#x3D;&quot; 已運行&quot;+diffYears+&quot; 年 &quot;diffDays+&quot; 天 &quot;+diffHours+&quot; 小時 &quot;+diffMinutes+&quot; 分鐘 &quot;+diffSeconds+&quot; 秒&quot;;</span><br><span class="line">&#125;</span><br><span class="line">siteTime();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>把代碼放在你想要的位置,插入位置不同,效果顯示的位置也會不同。若想要顯示為簡體或者英文,只要把對應的文字修改就行。</p><h1 id="添加標簽云"><a href="#添加標簽云" class="headerlink" title="添加標簽云"></a>添加標簽云</h1><p>效果如圖</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/tag-cloud.png"></p><p>在<code>next/layout/page.swig</code>中,找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">              &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你想標籤頁先顯示標簽云,再顯示基本的標籤頁,可以在這段代碼之前添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcloud.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;widget-title&quot;&gt;Tag Cloud&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width&#x3D;&quot;250&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width&#x3D;100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果是先顯示預設的標籤頁,再顯示標簽云,則把上面代碼添加到後面。</p><p>如果你只想顯示標簽云就行,可以把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">              &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>刪掉就行。</p><h1 id="修改界面内容顯示區域寬度"><a href="#修改界面内容顯示區域寬度" class="headerlink" title="修改界面内容顯示區域寬度"></a>修改界面内容顯示區域寬度</h1><p>Next主題默認的設置,兩邊留白的區域很大。當然我們可以修改設置<br>在<code>themes\next\source\css\_custom</code>的<code>custom.styl</code>添加下面參數  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 屏幕寬度小於1600px</span><br><span class="line">$content-desktop &#x3D; 700px</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 屏幕寬度大於或等於 1600px</span><br><span class="line">$content-desktop-large &#x3D; 900px</span><br></pre></td></tr></table></figure><p>修改對應的參數就行,此方法不適用於Pisces主題。</p><h1 id="添加文章時-自動打開markdown編輯器"><a href="#添加文章時-自動打開markdown編輯器" class="headerlink" title="添加文章時,自動打開markdown編輯器"></a>添加文章時,自動打開markdown編輯器</h1><p>找到博客根目錄,打開scripts文件夾(沒有的話,自己創建一個)。  </p><p>創建一個JavaScript文件,可任意命名。  </p><p>打開所創建的JavaScript文件,輸入以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根據自己安裝的hexo版本選擇</span></span><br><span class="line"><span class="comment">// Hexo 2.x 複製這段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">spawn(<span class="string">&#x27;start &quot;&quot; &quot;markdown編輯器絕對路徑&quot; &#x27;</span> + path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 複製這段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">&#x27;start &quot;&quot; &quot;markdown編輯器絕對路徑&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意: markdown編輯器絕對路徑 格式為(例如打開Typora)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\\Program Files\\Typora\\Typora.exe</span><br></pre></td></tr></table></figure><h1 id="添加在綫聯係功能"><a href="#添加在綫聯係功能" class="headerlink" title="添加在綫聯係功能"></a>添加在綫聯係功能</h1><p>一個在綫的聯係功能:<a href="http://www.daovoice.io/">DaoVoice</a></p><h2 id="注冊DaoVoice-獲取app-id"><a href="#注冊DaoVoice-獲取app-id" class="headerlink" title="注冊DaoVoice , 獲取app_id"></a>注冊DaoVoice , 獲取app_id</h2><p>點擊 <a href="http://www.daovoice.io/">DaoVoice</a> ,並點擊注冊。可以填入邀請碼：<code>98657237</code>  </p><p>得到 app_id</p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/daovoice_id.png"></p><h2 id="修改head-swig"><a href="#修改head-swig" class="headerlink" title="修改head.swig"></a>修改head.swig</h2><p>修改next\layout_partials\head\head.swig 文件, 添加以下内容  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]&#x3D;r;i[r]&#x3D;i[r]||function()&#123;(i[r].q&#x3D;i[r].q||[]).push(arguments)&#125;,i[r].l&#x3D;1*new Date();a&#x3D;s.createElement(o),m&#x3D;s.getElementsByTagName(o)[0];a.async&#x3D;1;a.src&#x3D;g;a.charset&#x3D;&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&#39;https:&#39; &#x3D;&#x3D; document.location.protocol ? &#39;https:&#39; : &#39;http:&#39;) + &quot;&#x2F;&#x2F;widget.daovoice.io&#x2F;widget&#x2F;0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&#39;init&#39;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&#39;update&#39;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>在<code>主題配置文件</code>中,添加以下内容</p><pre><code class="bash">  # daovoice 配置  daovoice: true  daovoice_app_id:   # 填入剛才的app_id</code></pre><h2 id="部署到網站"><a href="#部署到網站" class="headerlink" title="部署到網站"></a>部署到網站</h2><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 就能看到效果了,網頁右下角多了個 圖標</p><p>具體修改圖表的樣式,位置。可以在daovoice網頁中 應用設置-聊天設置 中配置  </p><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Related_settings_for_Hexo_and_Next_theme/daovoice2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> next </tag>
            
            <tag> 主題 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-bulid.gradle 解析</title>
      <link href="posts/a4ecdf66/"/>
      <url>posts/a4ecdf66/</url>
      
        <content type="html"><![CDATA[<h2 id="外層的bulid-gradle文件"><a href="#外層的bulid-gradle文件" class="headerlink" title="外層的bulid.gradle文件"></a>外層的bulid.gradle文件</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()   <span class="comment">// 一個代碼托管倉庫</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:2.3.0&#x27;</span> <span class="comment">// 聲明一個gradle插件</span></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task clean(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兩處的<strong>repositories</strong>的閉包中都聲明了<strong>jcenter()</strong> 這行配置。<br>jcenter是一個代碼托管倉庫,很多Androdi開源項目都會選擇將代碼托管到jcenter上,聲明了這個配置之後,可以在項目中引用任何jcenter上的開源項目。  </p><p><strong>dependencies閉包</strong>使用classpath聲明一個gradle插件。gradle并不是專門為構建android項目而開發,使用它時,需要聲明com.android.tools.build:gradle+版本號</p><h2 id="app目錄内的build-gradle文件"><a href="#app目錄内的build-gradle文件" class="headerlink" title="app目錄内的build.gradle文件"></a>app目錄内的build.gradle文件</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span>    <span class="comment">//指定項目的編譯版本</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;25.0.2&quot;</span> <span class="comment">//指定項目構建工具的版本</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.example.hwy01.myfirstapp&quot;</span>  <span class="comment">//指定項目的包名</span></span><br><span class="line">        minSdkVersion <span class="number">15</span>  </span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span> <span class="comment">//指定項目的版本號</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span> <span class="comment">//指定項目的版本名</span></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;    <span class="comment">//用於指定生成安裝文件的相關配置</span></span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies</span><br><span class="line">&#123;   <span class="comment">//指定當前項目所有的依賴關係</span></span><br><span class="line">    compile fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>]) <span class="comment">//本地依賴聲明,表示將libs目錄下所有的.jar後綴的文件都添加到項目的構建路徑中</span></span><br><span class="line">    androidTestCompile(<span class="string">&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;</span>, &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;com.android.support&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;support-annotations&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:25.2.0&#x27;</span> <span class="comment">//標準的遠程依賴庫格式</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.0.2&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;junit:junit:4.12&#x27;</span> <span class="comment">//用於聲明測試用例庫的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行是應用了一個插件,一般有2個值可選：  </p><ul><li><strong>com.android.application</strong>表示這是一個應用程序模塊</li><li><strong>com.android.library</strong> 表示這是一個庫模塊。</li></ul><p>應用程序模塊和庫模塊的最大區別是,一個可以直接運行,一個衹能作爲代碼庫依附于別的應用程序模塊來運行。  </p><p><strong>buildTypes</strong>閉包用於指定生成安裝文件的相關配置。通常衹有2個子閉包：debug和release</p><ul><li>debug閉包用於指定生成測試版安裝文件的配置</li><li>release閉包用於指定生成正式版安裝文件的配置<br>debug閉包可以忽略不寫。</li></ul><h3 id="release閉包詳解"><a href="#release閉包詳解" class="headerlink" title="release閉包詳解"></a>release閉包詳解</h3><ul><li>minifyEnabled 用於指定是否對對項目的代碼進行混淆。 true表示混淆,false表示不混淆。</li><li>proguardFiles用於指定混淆時使用的規則文件。</li></ul><p><code>proguard-android.txt</code> 是在Android SDK目錄下的,裏面是所有項目通用的混淆規則。<br><code>proguard-rules.pro</code> 是在當前項目根目錄下的,裏面可以編寫當前項目特有的混淆規則  </p><p>通過Android Studio直接運行項目生成的都是測試版安裝文件</p><p><code>dependencies閉包</code> 指定當前項目所有的依賴關係  </p><p>通常Android Studio項目一共有3種依賴方式：  </p><ul><li><strong>本地依賴</strong>  </li></ul><p>可以對本地的jar包或目錄添加依賴關係  </p><ul><li><strong>庫依賴</strong>  </li></ul><p>可以對項目中的庫模塊添加依賴關係  </p><ul><li><strong>遠程依賴</strong>  </li></ul><p>可以對jcenter庫上的開源項目添加依賴關係  </p><p><code>compile &#39;com.android.support:appcompat-v7:25.2.0&#39;</code> 標準的遠程依賴庫格式<br><code>com.android.support</code>是域名部分,用於和其他公司的庫做區分。<br><code>appcompat-v7</code>是組名稱,用於和同一個公司中不同的庫做區分。<br><code>25.2.0</code>是版本號,用於和同一個庫不同的版本做區分。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
            <tag> grade </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-Android Studio工程目錄結構介紹</title>
      <link href="posts/effd323a/"/>
      <url>posts/effd323a/</url>
      
        <content type="html"><![CDATA[<h2 id="Project模式下的項目結構"><a href="#Project模式下的項目結構" class="headerlink" title="Project模式下的項目結構"></a>Project模式下的項目結構</h2><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Android_Studio_Projects_Overview/Andoidstudioproject1.png"></p><h3 id="gradle-和-idea"><a href="#gradle-和-idea" class="headerlink" title=".gradle 和 .idea"></a>.gradle 和 .idea</h3><p>主要放置的都是Android studio自動生成的一些文件。</p><h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>項目的代碼資源等內容都在這個目錄</p><h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><p>包含gradle wrapper的配置文件</p><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>用來將指定的目錄或文件排除在版本控制之外的</p><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>這是項目全局的gradle構建腳本。</p><h3 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h3><p>這個文件是全局的gradle的配置文件,在這裏配置的屬性將會影響到項目中所有的gradle編譯腳本。</p><h3 id="gradlew-和-gradlew-bat"><a href="#gradlew-和-gradlew-bat" class="headerlink" title="gradlew 和 gradlew.bat"></a>gradlew 和 gradlew.bat</h3><p>這兩個文件是用來在令行介面中執行gradle 命令的,其中gradlew 是在linux和mac 系統中使用,而gradlew.bat是在windows系統中使用。  </p><h3 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h3><p>用來指定本機中的Android sdk路徑,通常內容都是自動生成,我們並不需要修改。</p><h3 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h3><p>用於指定項目中所有引入的模塊。通常情況下模塊的引入都是自動完成的,需要我們手動去修改的這個文件的場景可能比較少。</p><h3 id="iml"><a href="#iml" class="headerlink" title=".iml"></a>.iml</h3><p>.iml文件是所有IntelliJ IDEA 項目都會自動生成的一個文件,用於標識這是一個IntelliJ IDEA項目,我們不需要修改這個文件中的任何內容。</p><h2 id="App目錄下的結構"><a href="#App目錄下的結構" class="headerlink" title="App目錄下的結構"></a>App目錄下的結構</h2><p><img src= "/image/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/blog/Android_Studio_Projects_Overview/Andoidstudioproject2.png"></p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>主要是包含了一些在編譯中自動生成的文件。</p><h3 id="libs"><a href="#libs" class="headerlink" title="libs"></a>libs</h3><p>如果你的項目中使用了第三方jar包,就需要把這些jar包都放在libs目錄下,放在這個目錄下的jar包都會被自動添加到構建路徑里去。</p><h3 id="androidTest"><a href="#androidTest" class="headerlink" title="androidTest"></a>androidTest</h3><p>用來編寫Android Test測試用例的,可以對項目進行一些自動化測試。</p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>放置java代码的地方</p><h3 id="res"><a href="#res" class="headerlink" title="res"></a>res</h3><p>為 resource 的縮寫,專案所需的 UI 相關檔案,也就是非程式的資源,如 layout、圖像與文字。</p><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><p>整個Android項目的配置文件,在程序中自定義的所有四大組建都需要在這個文件裏註冊,另外還可以在這個文件中給應用程序添加權限聲明。</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>用來編寫Unit Test測試用例的,是對項目進行自動化測試的另一種方式。</p><h3 id="gitignore-1"><a href="#gitignore-1" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>用來將指定的目錄或文件排除在版本控制之外的.</p><h3 id="build-gradle-1"><a href="#build-gradle-1" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>這首app模塊的gradle構建腳本,這個文件中會指定很多項目構建相關的配置。</p><h3 id="proguard-rules-pro"><a href="#proguard-rules-pro" class="headerlink" title="proguard-rules.pro"></a>proguard-rules.pro</h3><p>這個文件用於指定項目代碼的混淆規則,當代碼開發完成後打開安裝包文件,如果不希望代碼被別人破解,通常會將代碼進行混淆,從而讓破解者難以閱讀。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一行代碼筆記-工具日志log</title>
      <link href="posts/e129ca4d/"/>
      <url>posts/e129ca4d/</url>
      
        <content type="html"><![CDATA[<h2 id="Log-v"><a href="#Log-v" class="headerlink" title="Log.v()"></a>Log.v()</h2><p>verbose 級別,用於打印那些最爲瑣碎的、意義最小的日志信息。級別最低的一種。</p><h2 id="Log-d"><a href="#Log-d" class="headerlink" title="Log.d ()"></a>Log.d ()</h2><p>debug 級別,用於打印一些調試信息。</p><h2 id="Log-i"><a href="#Log-i" class="headerlink" title="Log.i ()"></a>Log.i ()</h2><p>info 級別,用於打印一些比較重要的數據可以分析用戶行爲的數據。</p><h2 id="Log-w"><a href="#Log-w" class="headerlink" title="Log.w ()"></a>Log.w ()</h2><p>warm 級別,用於打印一些警告信息,提示程序在這個地方可能會有潛在的風險,最好去修復一下。</p><h2 id="Log-e"><a href="#Log-e" class="headerlink" title="Log.e ()"></a>Log.e ()</h2><p>error 級別,用於打印程序中的錯誤信息。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第一行代碼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第一行代碼 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
